// -*- C++ -*- generated by wxGlade 0.6.3 on Mon Nov 23 15:38:51 2009


#include <wx/app.h>
#include <wx/clipbrd.h>
#include <wx/filedlg.h>
#include <wx/txtstrm.h>
#include <wx/wfstream.h>
#include <wx/icon.h>

#include "Consts.h"
#include "ConfigData.h"
#include "HookObject.h"
#include "DictObject.h"
#include "TagObject.h"
#include "DisplayObject.h"
#include "TriggerObject.h"
#include "TagInputDialog.h"
#include "SpeakObject.h"
#include "FilterShowObject.h"
#include "DictLoadChoiceDialog.h"
#include "DictStoreChoiceDialog.h"
#include "AnalysisFilterSettingDialog.h"
#include "TrayIconObject.h"
#include "PluginObject.h"

#include "LingosHookApp.h"

// begin wxGlade: ::extracode
// end wxGlade

//class MyApp: public wxApp {
//public:
//    bool OnInit();
//
//    virtual void OnInitCmdLine(wxCmdLineParser& parser);
//    virtual bool OnCmdLineParsed(wxCmdLineParser& parser);
//};

IMPLEMENT_APP(MyApp)

const wxCmdLineEntryDesc MyApp::_cmdLineDesc[3] = 
    {
        { wxCMD_LINE_OPTION, wxT("f"), NULL, wxT("LingosHook database file(default is 'LingosHook.db3')."), wxCMD_LINE_VAL_STRING },
        { wxCMD_LINE_OPTION, wxT("F"), NULL, wxT("LingosHook database file(default is 'LingosHook.db3')."), wxCMD_LINE_VAL_STRING },
        { wxCMD_LINE_NONE }
    };

bool MyApp::OnInit()
{
    wxInitAllImageHandlers();

    wxCmdLineParser parser (_cmdLineDesc, argc, argv);

    if(parser.Parse() == 0)
    {
        wxString str = wxEmptyString;
        if(parser.Found(wxT("f"), &str) || parser.Found(wxT("F"), &str))
        {
            CConfigData::m_strDBFile = str;
        }    
    }

    LingosHookFrame* MainFrame = new LingosHookFrame(NULL, wxID_ANY, wxEmptyString);
    MainFrame->SetIcon(wxICON(ICON_MAIN));
    SetTopWindow(MainFrame);
    MainFrame->Show();

    return true;
}

////////////////////

LingosHookFrame::LingosHookFrame(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
, _objHook(NULL)
, _dataConfig(NULL)
, _objDict(NULL)
, _objTag(NULL)
, _objDisplay(NULL)
, _objMemoryDaily(NULL)
, _objSpeak(NULL)
, _objFilterShow(NULL)
, _objPlugin(NULL)
, _objTrayIcon(NULL)
, _bSysCanClose(false)
{
    if(InitConfigData() != 0)
    {
        wxMessageBox(_("Init configuration data failed."));
        exit(0);
    }

    if(InitLocale() != 0)
    {
        wxMessageBox(_("Init language data failed."));
        exit(0);
    }

    // begin wxGlade: LingosHookFrame::LingosHookFrame
    m_splitWindow = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3D|wxSP_BORDER);
    window_1_pane_2 = new wxPanel(m_splitWindow, wxID_ANY);
    m_noteContext = new wxNotebook(window_1_pane_2, CIID_PAGE_CONTEXT, wxDefaultPosition, wxDefaultSize, wxNB_BOTTOM);

    notebook_context_panel[CNID_RESULT] = new wxPanel(m_noteContext, wxID_ANY);
    notebook_context_panel[CNID_HTML] = new wxPanel(m_noteContext, wxID_ANY);
    notebook_context_panel[CNID_TAGS] = new wxPanel(m_noteContext, wxID_ANY);
    notebook_context_panel[CNID_SETTING] = new wxScrolledWindow(m_noteContext, wxID_ANY);
    notebook_context_panel[CNID_PLUGINS] = new wxPanel(m_noteContext, wxID_ANY);
    notebook_context_panel[CNID_ABOUT] = new wxPanel(m_noteContext, wxID_ANY);
    notebook_context_panel[CNID_TRACE] = new wxPanel(m_noteContext, wxID_ANY);

    //notebook_context_panel[CNID_TRACE] = new wxPanel(m_noteContext, wxID_ANY);
    //notebook_context_panel[CNID_ABOUT] = new wxPanel(m_noteContext, wxID_ANY);
    //notebook_context_panel[CNID_TAGS] = new wxPanel(m_noteContext, wxID_ANY);
    //notebook_context_panel[CNID_SETTING] = new wxScrolledWindow(m_noteContext, wxID_ANY);//, wxDefaultPosition, wxDefaultSize/*, wxTAB_TRAVERSAL*/);

    //notebook_context_panel[CNID_HTML] = new wxPanel(m_noteContext, CIID_PANEL_HTML);//, wxDefaultPosition, wxDefaultSize/*, wxTAB_TRAVERSAL*/);
    //notebook_context_panel[CNID_RESULT] = new wxPanel(m_noteContext, wxID_ANY);

    window_1_pane_1 = new wxPanel(m_splitWindow, wxID_ANY);
    m_noteIndex = new wxNotebook(window_1_pane_1, CIID_PAGE_INDEX, wxDefaultPosition, wxDefaultSize, wxNB_BOTTOM);
	m_noteIndex_pane_3 = new wxPanel(m_noteIndex, wxID_ANY);
    m_noteIndex_pane_2 = new wxPanel(m_noteIndex, wxID_ANY);
    sizer_27_staticbox = new wxStaticBox(m_noteIndex_pane_3, -1, _("Memory Daily"));
    sizer_15_staticbox = new wxStaticBox(notebook_context_panel[CNID_SETTING], -1, _("Lingoes Configuration"));
    sizer_16_staticbox = new wxStaticBox(notebook_context_panel[CNID_SETTING], -1, _("Application Configuration"));
    sizer_18_staticbox = new wxStaticBox(notebook_context_panel[CNID_SETTING], -1, _("Debug Configuration"));
    sizer_13_staticbox = new wxStaticBox(notebook_context_panel[CNID_TAGS], -1, _("Tags Management"));
    notebook_1_pane_1 = new wxPanel(m_noteIndex, wxID_ANY);
    const wxString *m_cbWordIndex_choices = NULL;
    m_cbWordIndex = new CLHComboBox(notebook_1_pane_1, CIID_TEXT_INDEX, wxT(""), wxDefaultPosition, wxDefaultSize, 0, m_cbWordIndex_choices, wxCB_DROPDOWN | wxTE_PROCESS_ENTER);
    const wxString *m_listIndex_choices = NULL;
    m_listIndex = new CLHListBox(notebook_1_pane_1, CIID_LIST_INDEX, wxDefaultPosition, wxDefaultSize, 0, m_listIndex_choices, wxLB_SINGLE|wxLB_SORT);
    m_btnFilter = new wxButton(m_noteIndex_pane_2, XIID_BUTTON_FILTER, _("Tag"), wxDefaultPosition, wxDefaultSize, wxBU_LEFT|wxNO_BORDER);
    m_treeFilter = new CLHFilterTreeCtrl(m_noteIndex_pane_2, CIID_TREE_FILTER, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxTR_HIDE_ROOT|wxSUNKEN_BORDER);
    m_textMemWord = new wxStaticText(m_noteIndex_pane_3, wxID_ANY, _("No Word"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE|wxST_NO_AUTORESIZE);
    m_textMemScore = new wxStaticText(m_noteIndex_pane_3, wxID_ANY, _("Scroe") + wxString::Format(wxT(" : %d"), -1), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE);
    static_line_1 = new wxStaticLine(m_noteIndex_pane_3, wxID_ANY);
    label_5 = new wxStaticText(m_noteIndex_pane_3, wxID_ANY, _("After seeing the above word, "));
    label_6 = new wxStaticText(m_noteIndex_pane_3, wxID_ANY, _("what are you feeling?"));
    m_radioMemLevel0 = new CLHRadioButton(m_noteIndex_pane_3, CIID_RADIO_MEMLEVEL1, _("Very easy!"));
    m_radioMemLevel1 = new CLHRadioButton(m_noteIndex_pane_3, CIID_RADIO_MEMLEVEL2, _("Know it.."));
    m_radioMemLevel2 = new CLHRadioButton(m_noteIndex_pane_3, CIID_RADIO_MEMLEVEL3, _("Fuzzy.."));
    m_radioMemLevel3 = new CLHRadioButton(m_noteIndex_pane_3, CIID_RADIO_MEMLEVEL4, _("What's it?!"));
    static_line_2 = new wxStaticLine(m_noteIndex_pane_3, wxID_ANY);
    m_btnMemRemove = new wxButton(m_noteIndex_pane_3, CIID_BUTTON_MEMREMOVE, _("Delete"));
    panel_5 = new wxPanel(m_noteIndex_pane_3, wxID_ANY);
    m_btnMemNext = new wxButton(m_noteIndex_pane_3, CIID_BUTTON_MEMNEXT, _("Next"));
    panel_6 = new wxPanel(m_noteIndex_pane_3, wxID_ANY);
    m_textMemType = new CLHTextCtrl(m_noteIndex_pane_3, CIID_TEXT_MEMTYPE, wxEmptyString);
    panel_10 = new wxPanel(m_noteIndex_pane_3, wxID_ANY);
    static_line_3 = new wxStaticLine(m_noteIndex_pane_3, wxID_ANY);
    panel_7 = new wxPanel(m_noteIndex_pane_3, wxID_ANY);
    m_btnMemRegen = new wxButton(m_noteIndex_pane_3, CIID_BUTTON_MEMREGEN, _("Re-Generate"));
    panel_8 = new wxPanel(m_noteIndex_pane_3, wxID_ANY);
    m_treeResult = new CLHResultTreeCtrl(notebook_context_panel[CNID_RESULT], CIID_TREE_RESULT, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxTR_DEFAULT_STYLE|wxSUNKEN_BORDER);
    m_winHTML = new CLHHtmlWindow(notebook_context_panel[CNID_HTML], CIID_CONTROL_HTMLWINDOW);

    label_13 = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, _("User Interface Language"));
    m_rdSetUILAuto = new wxRadioButton(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Auto-Detection"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
    m_rdSetUILEnglish = new wxRadioButton(notebook_context_panel[CNID_SETTING], wxID_ANY, _("English"));
    m_rdSetUILChinese = new wxRadioButton(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Chinese"));
    panel_12 = new wxPanel(notebook_context_panel[CNID_SETTING], wxID_ANY);
    m_cbSetAutoHook = new wxCheckBox(notebook_context_panel[CNID_SETTING], CIID_CHECKBOX_AUTOHOOK, _("Auto Check and Hook Lingoes"));
    label_11 = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Lingoes Location"));
    m_textSetLgsLocal = new wxTextCtrl(notebook_context_panel[CNID_SETTING], wxID_ANY, wxEmptyString);
    m_btnSetLgsBrowse = new wxButton(notebook_context_panel[CNID_SETTING], CIID_BUTTON_SETLGSBROWSE, _("Browse.."));
	
    label_14 = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Interface Language"));
    const wxString m_listInfLang_choices[] = {
        _("English"),
        _("Chinese")
    };
    m_listInfLang = new wxComboBox(notebook_context_panel[CNID_SETTING], wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, 2, m_listInfLang_choices, wxCB_DROPDOWN|wxCB_READONLY);

    m_cbSetStopRetrieve = new wxCheckBox(notebook_context_panel[CNID_SETTING], CIID_CHECKBOX_STOPRETRIEVE, _("Stop Auto Retrieve"));
    m_cbSetUseHotkey = new wxCheckBox(notebook_context_panel[CNID_SETTING], CIID_CHECKBOX_USEHOTKEY, _("Use Hotkey"));
    const wxString m_listSetHotkey_choices[] = {
        wxT("Ctrl+F10"),
        wxT("Alt+Ctrl+F10"),
        wxT("Ctrl+F11"),
        wxT("Alt+Ctrl+F11"),
        wxT("Ctrl+F12"),
        wxT("Alt+Ctrl+F12"),
        wxT("Ctrl+1")
	};
    m_listSetHotkey = new wxComboBox(notebook_context_panel[CNID_SETTING], wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, 7, m_listSetHotkey_choices, wxCB_DROPDOWN|wxCB_READONLY);
    panel_13 = new wxPanel(notebook_context_panel[CNID_SETTING], wxID_ANY);
    m_cbSetAutoSpeak = new wxCheckBox(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Auto Speak"));
	
//    label_1 = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Data Synchronization"));
//    m_checkSetTagSync = new wxCheckBox(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Classifications"));
//    m_checkSetMemSync = new wxCheckBox(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Memory Daily"));
    label_12 = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Data Retrieve Delay"));
    m_sliderSetDelay = new wxSlider(notebook_context_panel[CNID_SETTING], CIID_SLIDER_SETDELAY, 0, 0, 20, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_AUTOTICKS);
    m_labelSetDelay = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, wxT("0000 ms"));
    //label_7 = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, wxT("HTML Data Pre-Analyse"));
    //m_checkSetUseTidy = new wxCheckBox(notebook_context_panel[CNID_SETTING], wxID_ANY, wxT("Uses Tidy"));
    //label_2 = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, wxT("HTML Data Process"));
//    m_checkHTMLSave = new wxCheckBox(notebook_context_panel[CNID_SETTING], wxID_ANY, wxT("Storage"));
//    m_checkHTMLLoad = new wxCheckBox(notebook_context_panel[CNID_SETTING], wxID_ANY, wxT("Loading"));
    static_line_6 = new wxStaticLine(notebook_context_panel[CNID_SETTING], wxID_ANY);
    m_checkIgnoreDict = new wxCheckBox(notebook_context_panel[CNID_SETTING], CIID_CHECKBOX_IGNOREDICT, _("Ignore HTML Data Analysis Error"));
    m_checkSkipDict = new wxCheckBox(notebook_context_panel[CNID_SETTING], CIID_CHECKBOX_SKIPDICT, _("Skip Dictionary Analysis Process"));
    m_checkSkipHtml = new wxCheckBox(notebook_context_panel[CNID_SETTING], CIID_CHECKBOX_SKIPHTML, _("Skip HTML Data  Analysis Process"));
    m_btnSetDictStoreChoice = new wxButton(notebook_context_panel[CNID_SETTING], CIID_BUTTON_SETDICTSTORECHOICE, _("Dictionary Chooser.."));
    m_btnSetAnalysisFilter = new wxButton(notebook_context_panel[CNID_SETTING], CIID_BUTTON_SETANALYSISFILTER, _("Analysis Filter.."));
    static_line_5 = new wxStaticLine(notebook_context_panel[CNID_SETTING], wxID_ANY);
    label_4 = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Expanded Dictionary on Result"));
    const wxString m_comboxExpandDict_choices[] = {
        _("All Dictionaries")
    };
    m_comboxExpandDict = new wxComboBox(notebook_context_panel[CNID_SETTING], wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, 1, m_comboxExpandDict_choices, wxCB_DROPDOWN|wxCB_READONLY);
    label_10 = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Expanded HTML Data on Result"));
    m_btnSetDictChoice = new wxButton(notebook_context_panel[CNID_SETTING], CIID_BUTTON_SETDICTCHOICE, _("Dictionary Chooser.."));

    label_9 = new wxStaticText(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Favority Tab on Startup"));
    const wxString m_listFavoriteTab_choices[] = {
        _("Result"),
        _("HTML"),
        _("Tags"),
        _("Setting"),
        _("About")
    };//NULL;
    m_listFavoriteTab = new wxComboBox(notebook_context_panel[CNID_SETTING], wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, 5, m_listFavoriteTab_choices, wxCB_DROPDOWN|wxCB_READONLY);
    m_checkTrace = new wxCheckBox(notebook_context_panel[CNID_SETTING], wxID_ANY, _("Open Trace"));
    panel_1 = new wxPanel(notebook_context_panel[CNID_SETTING], wxID_ANY);
    panel_2 = new wxPanel(notebook_context_panel[CNID_SETTING], wxID_ANY);
    m_btnSetApply = new wxButton(notebook_context_panel[CNID_SETTING], CIID_BUTTON_APPLY, _("Apply"));
    label_3 = new wxStaticText(notebook_context_panel[CNID_TAGS], wxID_ANY, _("Default Tag"));
    m_textDefTag = new wxTextCtrl(notebook_context_panel[CNID_TAGS], wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    m_listTagMgnt = new wxListCtrl(notebook_context_panel[CNID_TAGS], CIID_LIST_TAGMGNT, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_SINGLE_SEL|wxLC_NO_SORT_HEADER|wxSUNKEN_BORDER);
    m_btnTagDefault = new wxButton(notebook_context_panel[CNID_TAGS], CIID_BUTTON_TAGSETDEFAULT, _("Set as Default"));
    panel_3 = new wxPanel(notebook_context_panel[CNID_TAGS], wxID_ANY);
    m_btnTagAdd = new wxButton(notebook_context_panel[CNID_TAGS], CIID_BUTTON_TAGADD, _("Add.."));
    panel_14 = new wxPanel(notebook_context_panel[CNID_TAGS], wxID_ANY);
    m_btnTagRename = new wxButton(notebook_context_panel[CNID_TAGS], CIID_BUTTON_TAGRENAME, _("Rename.."));	
    panel_4 = new wxPanel(notebook_context_panel[CNID_TAGS], wxID_ANY);
    m_btnTagRemove = new wxButton(notebook_context_panel[CNID_TAGS], CIID_BUTTON_TAGREMOVE, _("Delete"));

    m_listPlugins = new wxListCtrl(notebook_context_panel[CNID_PLUGINS], CIID_LIST_PLUGINS, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_SINGLE_SEL|wxLC_NO_SORT_HEADER|wxSUNKEN_BORDER);
    static_line_7 = new wxStaticLine(notebook_context_panel[CNID_PLUGINS], wxID_ANY);
    m_btnPluginsDetail = new wxButton(notebook_context_panel[CNID_PLUGINS], CIID_BUTTON_PLUGINSDETAIL, _("Detail.."));
    panel_11 = new wxPanel(notebook_context_panel[CNID_PLUGINS], wxID_ANY);
    m_btnPluginsRun = new wxButton(notebook_context_panel[CNID_PLUGINS], CIID_BUTTON_PLUGINSRUN, _("Run!"));
    m_textDebug = new wxTextCtrl(notebook_context_panel[CNID_TRACE], wxID_ANY, wxEmptyString);
    m_btnDebug = new wxButton(notebook_context_panel[CNID_TRACE], CIID_BUTTON_DEBUG, _("Debug"));
    m_textTrace = new wxTextCtrl(notebook_context_panel[CNID_TRACE], wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    label_8 = new wxStaticText(notebook_context_panel[CNID_ABOUT], wxID_ANY, wxString::Format(wxT("%s v%s by Jie."), APP_TITLE, APP_VERSION), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE|wxST_NO_AUTORESIZE);
    static_line_4 = new wxStaticLine(notebook_context_panel[CNID_ABOUT], wxID_ANY);
    m_btnAboutHelp = new wxButton(notebook_context_panel[CNID_ABOUT], CIID_BUTTON_ABOUTHELP, _("Welcome to online help.."));
    m_btnAboutSend = new wxButton(notebook_context_panel[CNID_ABOUT], CIID_BUTTON_ABOUTSEND, _("Send a mail to me. (codejie@gmail.com)"));
    m_btnAboutPost = new wxButton(notebook_context_panel[CNID_ABOUT], CIID_BUTTON_ABOUTPOST, _("Post a comment to me. (www.cppblog.com/codejie)"));
    m_btnAboutOpenSource = new wxButton(notebook_context_panel[CNID_ABOUT], CIID_BUTTON_ABOUTOPENSOURCE, _("Welcome to LingosHook Open Source Site"));
    m_btnAboutDonate = new wxButton(notebook_context_panel[CNID_ABOUT], CIID_BUTTON_ABOUTDONATE, _("Please DONATE to LingosHook"));
    panel_9 = new wxPanel(notebook_context_panel[CNID_ABOUT], wxID_ANY);

    m_labelInfo = new wxStaticText(this, wxID_ANY, _("Ready..."));
    m_btnHook = new wxToggleButton(this, CIID_BUTTON_HOOK, _("Hook"));

    //SetIcon(wxICON(ICON_MAIN));
    
    set_properties();
    do_layout();
    // end wxGlade
}

LingosHookFrame::~LingosHookFrame()
{
    delete _objTrayIcon, _objTrayIcon = NULL;
}

BEGIN_EVENT_TABLE(LingosHookFrame, wxFrame)
    // begin wxGlade: LingosHookFrame::event_table
    EVT_TEXT_ENTER(CIID_TEXT_INDEX, LingosHookFrame::OnWordIndexEnter)
    EVT_TEXT(CIID_TEXT_INDEX, LingosHookFrame::OnWordIndexText)
    EVT_COMMAND(CIID_TEXT_INDEX, wxEVT_COMMAND_LH_COMBOBOX_FOCUS, LingosHookFrame::OnWordIndexFocus)
    EVT_LISTBOX_DCLICK(CIID_LIST_INDEX, LingosHookFrame::OnIndexDClick)
    EVT_LISTBOX(CIID_LIST_INDEX, LingosHookFrame::OnIndexSelected)
    EVT_COMMAND(CIID_LIST_INDEX, wxEVT_COMMAND_LH_LISTBOX_DELETE, LingosHookFrame::OnIndexDelete)
    EVT_COMMAND(CIID_LIST_INDEX, wxEVT_COMMAND_LH_LISTBOX_FINDITEM, LingosHookFrame::OnIndexFindItem)
    EVT_COMMAND(CIID_LIST_INDEX, wxEVT_COMMAND_LH_LISTBOX_CONTEXTMENU, LingosHookFrame::OnIndexContextMenu)
    EVT_COMMAND(CIID_LIST_INDEX, wxEVT_COMMAND_LH_LISTBOX_FOCUS, LingosHookFrame::OnIndexFocus)
    EVT_NOTEBOOK_PAGE_CHANGED(CIID_PAGE_INDEX, LingosHookFrame::OnNoteIndexChanged)
    EVT_BUTTON(CIID_BUTTON_APPLY, LingosHookFrame::OnBtnSetApply)
    EVT_BUTTON(CIID_BUTTON_SETLGSBROWSE, LingosHookFrame::OnBtnSetLgsBrowse)
    EVT_LIST_ITEM_DESELECTED(CIID_LIST_TAGMGNT, LingosHookFrame::OnListTagMgntDeselect)
    EVT_LIST_ITEM_SELECTED(CIID_LIST_TAGMGNT, LingosHookFrame::OnListTagMgntSelect)
    EVT_BUTTON(CIID_BUTTON_TAGSETDEFAULT, LingosHookFrame::OnBtnTagSetDefault)
    EVT_BUTTON(CIID_BUTTON_TAGADD, LingosHookFrame::OnBtnTagAdd)
	EVT_BUTTON(CIID_BUTTON_TAGRENAME, LingosHookFrame::OnBtnTagRename)
    EVT_BUTTON(CIID_BUTTON_TAGREMOVE, LingosHookFrame::OnBtnTagRemove)
    EVT_LIST_ITEM_DESELECTED(CIID_LIST_PLUGINS, LingosHookFrame::OnListPluginsDeselected)
    EVT_LIST_ITEM_SELECTED(CIID_LIST_PLUGINS, LingosHookFrame::OnListPluginsSelected)
    EVT_BUTTON(CIID_BUTTON_PLUGINSDETAIL, LingosHookFrame::OnBtnPluginsDetail)
    EVT_BUTTON(CIID_BUTTON_PLUGINSRUN, LingosHookFrame::OnBtnPluginsRun)	
    EVT_NOTEBOOK_PAGE_CHANGED(CIID_PAGE_CONTEXT, LingosHookFrame::OnNoteContextChanged)
    EVT_TOGGLEBUTTON(CIID_BUTTON_HOOK, LingosHookFrame::OnBtnHook)
    EVT_BUTTON(XIID_BUTTON_FILTER, LingosHookFrame::OnBtnFilter)
    EVT_TREE_SEL_CHANGED(CIID_TREE_FILTER, LingosHookFrame::OnTreeFilterChange)
    EVT_COMMAND(CIID_TREE_FILTER, wxEVT_COMMAND_LH_TREECTRL_FOCUS, LingosHookFrame::OnTreeFilterFocus)
    EVT_MENU_RANGE(FMID_BEGIN, FMID_END, LingosHookFrame::OnMenuFilter)
    EVT_MENU_RANGE(FMID_REMOVEWORDBYTAG, FMID_REMOVEWORDBYDATE, LingosHookFrame::OnContextMenuFilter)
    EVT_CHECKBOX(CIID_CHECKBOX_STOPRETRIEVE, LingosHookFrame::OnCheckSetStopRetrieve)
    EVT_CHECKBOX(CIID_CHECKBOX_USEHOTKEY, LingosHookFrame::OnCheckSetUseHotkey)
    EVT_BUTTON(CIID_BUTTON_SETDICTCHOICE, LingosHookFrame::OnBtnSetDictChoice)
    EVT_BUTTON(CIID_BUTTON_SETDICTSTORECHOICE, LingosHookFrame::OnBtnSetDictStoreChoice)
    EVT_BUTTON(CIID_BUTTON_SETANALYSISFILTER, LingosHookFrame::OnBtnSetAnalysisFilter)
    EVT_BUTTON(CIID_BUTTON_MEMREMOVE, LingosHookFrame::OnBtnMemRemove)
    EVT_BUTTON(CIID_BUTTON_MEMNEXT, LingosHookFrame::OnBtnMemNext)
    EVT_RADIOBUTTON(CIID_RADIO_MEMLEVEL1, LingosHookFrame::OnRadioMemLevel)
    EVT_RADIOBUTTON(CIID_RADIO_MEMLEVEL2, LingosHookFrame::OnRadioMemLevel)
    EVT_RADIOBUTTON(CIID_RADIO_MEMLEVEL3, LingosHookFrame::OnRadioMemLevel)
    EVT_RADIOBUTTON(CIID_RADIO_MEMLEVEL4, LingosHookFrame::OnRadioMemLevel)
    EVT_COMMAND(CIID_RADIO_MEMLEVEL1, wxEVT_COMMAND_LH_RADIOBUTTON_FOCUS, LingosHookFrame::OnRadioMemLevelFocus)
    EVT_COMMAND(CIID_RADIO_MEMLEVEL2, wxEVT_COMMAND_LH_RADIOBUTTON_FOCUS, LingosHookFrame::OnRadioMemLevelFocus)
    EVT_COMMAND(CIID_RADIO_MEMLEVEL3, wxEVT_COMMAND_LH_RADIOBUTTON_FOCUS, LingosHookFrame::OnRadioMemLevelFocus)
    EVT_COMMAND(CIID_RADIO_MEMLEVEL4, wxEVT_COMMAND_LH_RADIOBUTTON_FOCUS, LingosHookFrame::OnRadioMemLevelFocus)
    EVT_BUTTON(CIID_BUTTON_MEMREGEN, LingosHookFrame::OnBtnMemRegen)
    EVT_BUTTON(CIID_BUTTON_ABOUTHELP, LingosHookFrame::OnBtnAboutHelp)
    EVT_BUTTON(CIID_BUTTON_ABOUTSEND, LingosHookFrame::OnBtnAboutSend)
    EVT_BUTTON(CIID_BUTTON_ABOUTPOST, LingosHookFrame::OnBtnAboutPost)
	EVT_BUTTON(CIID_BUTTON_ABOUTOPENSOURCE, LingosHookFrame::OnBtnAboutOpenSource)
    EVT_BUTTON(CIID_BUTTON_ABOUTDONATE, LingosHookFrame::OnBtnAboutDonate)
	EVT_CHECKBOX(CIID_CHECKBOX_IGNOREDICT, LingosHookFrame::OnCheckIgnoreDict)
    EVT_CHECKBOX(CIID_CHECKBOX_SKIPDICT, LingosHookFrame::OnCheckSkipDict)	
    EVT_CHECKBOX(CIID_CHECKBOX_SKIPHTML, LingosHookFrame::OnCheckSkipHTML)	
    EVT_MENU(IMID_SPEAK, LingosHookFrame::OnMenuIndexSpeak)
    EVT_MENU(IMID_COPY, LingosHookFrame::OnMenuIndexCopy)
    EVT_MENU(IMID_DELETE, LingosHookFrame::OnMenuIndexDelete)
    EVT_MENU(IMID_TAGREMOVE, LingosHookFrame::OnMenuIndexTagRemove)
    EVT_MENU_RANGE(IMID_TAGCOPY_START, IMID_TAGCOPY_END, OnMenuIndexTagCopy)
	EVT_MENU_RANGE(IMID_TAGMOVEALL_START, IMID_TAGMOVEALL_END, OnMenuIndexTagMoveAll)
    EVT_MENU(IMID_SETTAGDEFAULT, LingosHookFrame::OnMenuSetTagDefault)
    EVT_COMMAND(CIID_TREE_FILTER, wxEVT_COMMAND_LH_TREECTRL_CONTEXTMENU, LingosHookFrame::OnTreeFilterContextMenu)
    EVT_COMMAND(CIID_TREE_RESULT, wxEVT_COMMAND_LH_TREECTRL_CONTEXTMENU, LingosHookFrame::OnTreeResultContextMenu)

    EVT_COMMAND(CIID_TEXT_MEMTYPE, wxEVT_COMMAND_LH_TEXTCTRL_KEYDOWN, LingosHookFrame::OnMemTypeKeyDown)
    EVT_COMMAND(CIID_TEXT_MEMTYPE, wxEVT_COMMAND_LH_TEXTCTRL_FOCUS, LingosHookFrame::OnMemTypeFocus)
    EVT_TEXT(CIID_TEXT_MEMTYPE, LingosHookFrame::OnMemTypeText)
	EVT_COMMAND_SCROLL_ENDSCROLL(wxID_ANY, LingosHookFrame::OnScrollSetDelayEnd)
//    EVT_MENU_RANGE(IMID_TAGMOVE_START, IMID_TAGMOVE_END, OnMenuIndexTagMove)

    EVT_BUTTON(CIID_BUTTON_DEBUG, LingosHookFrame::OnBtnDebug)

    EVT_CLOSE(LingosHookFrame::OnClose)
   // end wxGlade
END_EVENT_TABLE();

// wxGlade: add LingosHookFrame event handlers


void LingosHookFrame::set_properties()
{
    // begin wxGlade: LingosHookFrame::set_properties
    if(CConfigData::m_strDBFile == APP_DEFAULT_DBFILE)
        SetTitle(APP_TITLE);
    else
        SetTitle(APP_TITLE + wxT(" - ") + CConfigData::m_strDBFile);
    SetSize(wxSize(674, 550));
	SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    m_cbWordIndex->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    m_listIndex->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    m_treeFilter->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    m_treeResult->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    label_8->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    m_listInfLang->SetSelection(0);
    m_textMemWord->SetFont(wxFont(16, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    m_textMemWord->SetAutoLayout(true);
    m_radioMemLevel0->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));
    m_radioMemLevel1->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));
    m_radioMemLevel2->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));
    m_radioMemLevel3->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));
    m_btnAboutDonate->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("MS Shell Dlg 2")));
    m_textMemType->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));

    ((wxScrolledWindow*)notebook_context_panel[CNID_SETTING])->SetScrollRate(10, 10);

    m_btnMemNext->SetDefault();
    m_listTagMgnt->InsertColumn(0, _("Tag"));
    m_listTagMgnt->InsertColumn(1, _("Counter"));
    m_listTagMgnt->InsertColumn(2, _("CreateTime"));
    m_listTagMgnt->InsertColumn(3, _("Description"));

    m_btnTagRename->Enable(false);
    m_btnTagRemove->Enable(false);
    m_btnTagDefault->Enable(false);
	
    m_listPlugins->InsertColumn(0, _("Name"));
    m_listPlugins->InsertColumn(1, _("Version"));
    m_listPlugins->InsertColumn(2, _("Author"));
    m_listPlugins->InsertColumn(3, _("Description"),wxLIST_FORMAT_LEFT, 200);

    m_btnPluginsDetail->Enable(false);
    m_btnPluginsRun->Enable(false);

    m_comboxExpandDict->SetSelection(0);

    //m_checkSkipHtml->Enable(false);
    //m_checkSetUseTidy->Enable(false);
    //m_checkHTMLSave->Enable(false);
    //m_checkHTMLLoad->Enable(false);

    //notebook_context_panel[CNID_HTML]->Enable(false);
    //m_winHTML->Enable(false);

	if(CreateObjects() != 0)
    {
        wxMessageBox(_("Init failed."));
        exit(0);
    }

    ::PostMessage((HWND)this->GetHWND(), WM_OBJECT_INIT, 0, 0);

    // end wxGlade
}


void LingosHookFrame::do_layout()
{
    // begin wxGlade: LingosHookFrame::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_26 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_48 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_12 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_39 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_57 = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_46 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_41 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_40 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_42 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_21 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_24 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_59 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_23 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_13 = new wxStaticBoxSizer(sizer_13_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_25 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_22 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_11 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_14 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_17 = new wxBoxSizer(wxHORIZONTAL);
    //wxBoxSizer* sizer_50 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_18 = new wxStaticBoxSizer(sizer_18_staticbox, wxHORIZONTAL);
    wxStaticBoxSizer* sizer_16 = new wxStaticBoxSizer(sizer_16_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_49 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_51 = new wxBoxSizer(wxHORIZONTAL);


    wxBoxSizer* sizer_44 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_54 = new wxBoxSizer(wxHORIZONTAL);

    wxBoxSizer* sizer_43 = new wxBoxSizer(wxHORIZONTAL);
//    wxBoxSizer* sizer_38 = new wxBoxSizer(wxHORIZONTAL);
//    wxBoxSizer* sizer_47 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_53 = new wxBoxSizer(wxHORIZONTAL);

//    wxBoxSizer* sizer_37 = new wxBoxSizer(wxHORIZONTAL);
//    wxBoxSizer* sizer_45 = new wxBoxSizer(wxHORIZONTAL);

    //wxBoxSizer* sizer_19 = new wxBoxSizer(wxHORIZONTAL);
//    wxBoxSizer* sizer_23 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_15 = new wxStaticBoxSizer(sizer_15_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_52 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_58 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_10 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_8 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizer_27 = new wxStaticBoxSizer(sizer_27_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_36 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_35 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_29 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_30 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_34 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_33 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_32 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_31 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_28 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_9 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_20 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_55 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_56 = new wxBoxSizer(wxHORIZONTAL);
	
    sizer_20->Add(m_cbWordIndex, 0, wxEXPAND, 0);
    sizer_20->Add(m_listIndex, 1, wxEXPAND, 0);
    sizer_5->Add(sizer_20, 1, wxEXPAND, 0);
    notebook_1_pane_1->SetSizer(sizer_5);
    sizer_9->Add(m_btnFilter, 0, wxEXPAND, 0);
    sizer_9->Add(m_treeFilter, 1, wxEXPAND, 0);
    m_noteIndex_pane_2->SetSizer(sizer_9);
    sizer_28->Add(m_textMemWord, 0, wxALL|wxEXPAND, 16);
    sizer_28->Add(m_textMemScore, 0, wxEXPAND|wxRIGHT, 8);
    sizer_27->Add(sizer_28, 0, wxEXPAND, 0);
    sizer_27->Add(static_line_1, 0, wxALL|wxEXPAND, 4);
    sizer_29->Add(label_5, 0, wxLEFT|wxEXPAND, 8);
    sizer_29->Add(label_6, 0, wxLEFT, 72);
    sizer_31->Add(20, 20, 0, 0, 0);
    sizer_31->Add(m_radioMemLevel0, 1, wxTOP|wxBOTTOM, 4);
    sizer_30->Add(sizer_31, 1, wxEXPAND, 0);
    sizer_32->Add(20, 20, 0, 0, 0);
    sizer_32->Add(m_radioMemLevel1, 0, wxTOP|wxBOTTOM, 4);
    sizer_30->Add(sizer_32, 1, wxEXPAND, 0);
    sizer_33->Add(20, 20, 0, 0, 0);
    sizer_33->Add(m_radioMemLevel2, 0, wxTOP|wxBOTTOM, 4);
    sizer_30->Add(sizer_33, 1, wxEXPAND, 0);
    sizer_34->Add(20, 20, 0, 0, 0);
    sizer_34->Add(m_radioMemLevel3, 0, wxTOP|wxBOTTOM, 4);
    sizer_30->Add(sizer_34, 1, wxEXPAND, 0);
    sizer_29->Add(sizer_30, 0, wxALL|wxEXPAND, 16);
    sizer_27->Add(sizer_29, 0, wxEXPAND, 0);
    sizer_27->Add(static_line_2, 0, wxALL|wxEXPAND, 4);
    sizer_35->Add(m_btnMemRemove, 0, 0, 0);
    sizer_35->Add(panel_5, 1, wxEXPAND, 0);
    sizer_35->Add(m_btnMemNext, 0, 0, 0);
    sizer_27->Add(sizer_35, 0, wxALL|wxEXPAND, 8);
    sizer_27->Add(panel_6, 1, wxEXPAND, 0);
    sizer_27->Add(m_textMemType, 0, wxALL|wxEXPAND, 12);
    sizer_27->Add(panel_10, 1, wxEXPAND, 0);
    sizer_27->Add(static_line_3, 0, wxALL|wxEXPAND, 4);
    sizer_36->Add(panel_7, 2, wxEXPAND, 0);
    sizer_36->Add(m_btnMemRegen, 3, 0, 0);
    sizer_36->Add(panel_8, 2, wxEXPAND, 0);
    sizer_27->Add(sizer_36, 0, wxALL|wxEXPAND, 4);
    m_noteIndex_pane_3->SetSizer(sizer_27);
    m_noteIndex->AddPage(notebook_1_pane_1, _("Index"));
    m_noteIndex->AddPage(m_noteIndex_pane_2, _("Classifications"));
    m_noteIndex->AddPage(m_noteIndex_pane_3, _("Memory Daily"));
    sizer_4->Add(m_noteIndex, 1, wxEXPAND, 0);
    window_1_pane_1->SetSizer(sizer_4);
    sizer_8->Add(m_treeResult, 1, wxEXPAND, 0);
    notebook_context_panel[CNID_RESULT]->SetSizer(sizer_8);
    sizer_10->Add(m_winHTML, 1, wxEXPAND, 0);
    notebook_context_panel[CNID_HTML]->SetSizer(sizer_10);
	
    sizer_15->Add(label_13, 0, 0, 0);
    sizer_58->Add(m_rdSetUILAuto, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 4);
    sizer_58->Add(m_rdSetUILEnglish, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 4);
    sizer_58->Add(m_rdSetUILChinese, 0, wxRIGHT|wxALIGN_CENTER_VERTICAL, 4);
    sizer_58->Add(panel_12, 1, wxEXPAND, 0);
    sizer_15->Add(sizer_58, 1, wxALL|wxEXPAND, 4);
    sizer_15->Add(m_cbSetAutoHook, 0, wxRIGHT|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizer_52->Add(label_11, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_52->Add(m_textSetLgsLocal, 1, wxLEFT|wxRIGHT|wxEXPAND, 4);
    sizer_52->Add(m_btnSetLgsBrowse, 0, 0, 0);
    sizer_15->Add(sizer_52, 1, wxRIGHT|wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_14->Add(sizer_15, 0, wxEXPAND, 0);

    sizer_23->Add(label_14, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_23->Add(m_listInfLang, 0, wxLEFT|wxALIGN_CENTER_VERTICAL, 4);
    sizer_16->Add(sizer_23, 0, wxBOTTOM|wxEXPAND, 4);

    sizer_59->Add(m_cbSetAutoSpeak, 0, wxALIGN_CENTER_VERTICAL, 8);
    sizer_59->Add(m_cbSetStopRetrieve, 0, wxLEFT | wxALIGN_CENTER_VERTICAL, 8);
    sizer_59->Add(m_cbSetUseHotkey, 0, wxLEFT|wxALIGN_CENTER_VERTICAL, 8);
    sizer_59->Add(m_listSetHotkey, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_59->Add(panel_13, 1, wxEXPAND, 0);
    sizer_16->Add(sizer_59, 0, wxBOTTOM|wxEXPAND, 4);
	
    //sizer_19->Add(m_cbSetAutoSpeak, 0, wxALIGN_CENTER_VERTICAL, 8);
    //sizer_16->Add(sizer_19, 0, wxBOTTOM|wxEXPAND, 4);
	
//    sizer_37->Add(label_1, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
//    sizer_37->Add(m_checkSetTagSync, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
//    sizer_37->Add(m_checkSetMemSync, 0, wxLEFT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
//    sizer_16->Add(sizer_37, 0, wxBOTTOM|wxEXPAND, 4);
	
    sizer_53->Add(label_12, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizer_53->Add(m_sliderSetDelay, 1, wxLEFT|wxRIGHT|wxEXPAND|wxALIGN_CENTER_VERTICAL, 4);
    sizer_53->Add(m_labelSetDelay, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_16->Add(sizer_53, 0, wxBOTTOM|wxEXPAND, 4);
	
//    sizer_47->Add(label_7, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
//    sizer_47->Add(m_checkSetUseTidy, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
//    sizer_16->Add(sizer_47, 0, wxBOTTOM|wxEXPAND, 4);
//    sizer_38->Add(label_2, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
//    sizer_38->Add(m_checkHTMLSave, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
//    sizer_38->Add(m_checkHtmlLoad, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
//    sizer_16->Add(sizer_38, 0, wxEXPAND, 0);
    sizer_16->Add(static_line_6, 0, wxALL|wxEXPAND, 4);
    sizer_44->Add(m_checkIgnoreDict, 0, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_44->Add(m_checkSkipDict, 0, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_54->Add(m_checkSkipHtml, 0, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_54->Add(m_btnSetDictStoreChoice, 0, wxLEFT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizer_54->Add(m_btnSetAnalysisFilter, 0, wxLEFT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizer_44->Add(sizer_54, 1, wxEXPAND, 0);
//    sizer_44->Add(m_checkSkipHtml, 0, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_16->Add(sizer_44, 0, wxEXPAND, 0);
    sizer_16->Add(static_line_5, 0, wxALL|wxEXPAND, 4);
    sizer_43->Add(label_4, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 2);
    sizer_43->Add(m_comboxExpandDict, 0, wxLEFT|wxTOP|wxBOTTOM, 2);
    sizer_16->Add(sizer_43, 0, wxEXPAND, 0);
    sizer_51->Add(label_10, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 2);
    sizer_51->Add(m_btnSetDictChoice, 0, wxLEFT|wxTOP|wxBOTTOM, 2);
    sizer_16->Add(sizer_51, 0, wxEXPAND, 0);
    sizer_49->Add(label_9, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 2);
    sizer_49->Add(m_listFavoriteTab, 0, wxLEFT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 2);
    sizer_16->Add(sizer_49, 0, wxEXPAND, 0);
    sizer_14->Add(sizer_16, 0, wxEXPAND, 0);
    sizer_18->Add(m_checkTrace, 0, wxTOP|wxBOTTOM, 2);
    sizer_14->Add(sizer_18, 0, wxEXPAND, 0);
#ifndef __LH_DEBUG__
    sizer_18->Show(false);
#endif
    sizer_14->Add(panel_1, 1, wxEXPAND, 0);
    //panel_2->SetSizer(sizer_50);
    sizer_17->Add(panel_2, 1, wxEXPAND, 0);
    sizer_17->Add(m_btnSetApply, 0, 0, 0);
    sizer_14->Add(sizer_17, 0, wxEXPAND, 0);
    sizer_11->Add(sizer_14, 1, wxEXPAND, 0);
    notebook_context_panel[CNID_SETTING]->SetSizer(sizer_11);

    sizer_22->Add(label_3, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_22->Add(m_textDefTag, 1, wxALL|wxEXPAND, 4);
    sizer_21->Add(sizer_22, 0, wxEXPAND, 0);
    sizer_13->Add(m_listTagMgnt, 1, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_25->Add(m_btnTagDefault, 0, 0, 0);
    sizer_25->Add(panel_3, 1, wxEXPAND, 0);
    sizer_25->Add(m_btnTagAdd, 0, 0, 0);
    sizer_25->Add(panel_14, 1, wxEXPAND, 0);
    sizer_25->Add(m_btnTagRename, 0, 0, 0);
    sizer_25->Add(panel_4, 1, wxEXPAND, 0);
    sizer_25->Add(m_btnTagRemove, 0, 0, 0);
    sizer_13->Add(sizer_25, 0, wxALL|wxEXPAND, 4);
    sizer_24->Add(sizer_13, 1, wxEXPAND, 0);
    sizer_21->Add(sizer_24, 1, wxEXPAND, 0);
    notebook_context_panel[CNID_TAGS]->SetSizer(sizer_21);
	
    sizer_55->Add(m_listPlugins, 1, wxEXPAND, 0);
    sizer_55->Add(static_line_7, 0, wxALL|wxEXPAND, 16);
    sizer_56->Add(m_btnPluginsDetail, 0, wxLEFT, 16);
    sizer_56->Add(panel_11, 1, wxEXPAND, 0);
    sizer_56->Add(m_btnPluginsRun, 0, wxRIGHT, 16);
    sizer_55->Add(sizer_56, 0, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, 16);
    notebook_context_panel[CNID_PLUGINS]->SetSizer(sizer_55);	
	
    sizer_12->Add(label_8, 0, wxTOP|wxBOTTOM|wxEXPAND, 16);
    sizer_12->Add(static_line_4, 0, wxLEFT|wxRIGHT|wxEXPAND, 4);
    sizer_42->Add(m_btnAboutHelp, 1, wxLEFT|wxRIGHT|wxEXPAND, 8);
    sizer_39->Add(sizer_42, 1, wxALL|wxEXPAND, 8);
    sizer_39->Add(32, 32, 0, 0, 0);
    sizer_40->Add(m_btnAboutSend, 1, wxLEFT|wxRIGHT|wxEXPAND, 8);
    sizer_39->Add(sizer_40, 1, wxALL|wxEXPAND, 8);
    sizer_41->Add(m_btnAboutPost, 1, wxLEFT|wxRIGHT|wxEXPAND, 8);
    sizer_39->Add(sizer_41, 1, wxALL|wxEXPAND, 8);
    sizer_39->Add(32, 32, 0, 0, 0);
    sizer_46->Add(m_btnAboutOpenSource, 1, wxLEFT|wxRIGHT|wxEXPAND, 8);
    sizer_39->Add(sizer_46, 1, wxALL|wxEXPAND, 8);
    sizer_39->Add(32, 32, 0, 0, 0);
    sizer_57->Add(m_btnAboutDonate, 1, wxLEFT|wxRIGHT|wxEXPAND, 8);
    sizer_39->Add(sizer_57, 1, wxALL|wxEXPAND, 8);
    sizer_12->Add(sizer_39, 0, wxTOP|wxBOTTOM|wxEXPAND, 16);
    sizer_12->Add(panel_9, 1, wxEXPAND, 0);
	notebook_context_panel[CNID_ABOUT]->SetSizer(sizer_12);	
    sizer_48->Add(m_textDebug, 1, wxEXPAND, 0);
    sizer_48->Add(m_btnDebug, 0, 0, 0);
    sizer_26->Add(sizer_48, 0, wxEXPAND, 0);
    sizer_26->Add(m_textTrace, 1, wxEXPAND, 0);
    notebook_context_panel[CNID_TRACE]->SetSizer(sizer_26);
    m_noteContext->AddPage(notebook_context_panel[CNID_RESULT], _("Result"));
    m_noteContext->AddPage(notebook_context_panel[CNID_HTML], _("HTML"));
    m_noteContext->AddPage(notebook_context_panel[CNID_TAGS], _("Tags"));
    m_noteContext->AddPage(notebook_context_panel[CNID_SETTING], _("Setting"));
	m_noteContext->AddPage(notebook_context_panel[CNID_PLUGINS], _("Plugins"));
    m_noteContext->AddPage(notebook_context_panel[CNID_ABOUT], _("About"));	
#ifdef __LH_DEBUG__
    m_noteContext->AddPage(notebook_context_panel[CNID_TRACE], _("Debug"));
#else
    notebook_context_panel[CNID_TRACE]->Hide();
#endif
    sizer_7->Add(m_noteContext, 1, wxEXPAND, 0);
    sizer_6->Add(sizer_7, 1, wxEXPAND, 0);
    window_1_pane_2->SetSizer(sizer_6);
    m_splitWindow->SplitVertically(window_1_pane_1, window_1_pane_2, 210);
    sizer_2->Add(m_splitWindow, 1, wxEXPAND, 0);
    sizer_3->Add(m_labelInfo, 1, wxLEFT|wxALIGN_CENTER_VERTICAL, 8);
    sizer_3->Add(m_btnHook, 0, 0, 0);
    sizer_2->Add(sizer_3, 0, wxEXPAND, 0);
    sizer_1->Add(sizer_2, 1, wxEXPAND, 0);

    SetSizer(sizer_1);


    Layout();
    // end wxGlade
}

int LingosHookFrame::CreateObjects()
{
	//if(_objDB.Init(_("LingosHook.db3")) != 0)
    //if(_objDB.Init(CConfigData::m_strDBFile) != 0)
    //    return -1;
    //
    //_dataConfig.reset(new CConfigData(_objDB));

    _objDict.reset(new CDictObject(_objDB, (*_dataConfig)));
    _objTag.reset(new CTagObject(_objDB));
    _objMemoryDaily.reset(new MemoryDaily::CManageObject(_objDB));
	_objHook.reset(new CHookObject(this));
    _objDisplay.reset(new CDisplayObject(this));
    _objSpeak.reset(new CSpeakObject());
    _objFilterShow.reset(new CFilterShowObject(_objDB, m_treeFilter));
    _objPlugin.reset(new CPluginObject(this, &_objDB));

    _objTrayIcon = new CTrayIconObject(this, _dataConfig.get(), _objTag.get());

    g_objTrigger.AttachConfigData(_dataConfig.get());
    g_objTrigger.AttachDictObject(_objDict.get());
    g_objTrigger.AttachDisplayObject(_objDisplay.get());
    g_objTrigger.AttachTagObject(_objTag.get());
    g_objTrigger.AttachMemoryDailyObject(_objMemoryDaily.get());
    g_objTrigger.AttachSpeakObject(_objSpeak.get());
    g_objTrigger.AttachFilterShowObject(_objFilterShow.get());

    return 0;
}

int LingosHookFrame::InitConfigData()
{
    if(_objDB.Init(CConfigData::m_strDBFile) != 0)
        return -1;
    
    _dataConfig.reset(new CConfigData(_objDB));

    if(_dataConfig->Init() != 0)
        return -1;
    if(_dataConfig->Load() != 0)
        return -1;

    return 0;
}

int LingosHookFrame::InitLocale()
{
    if(_dataConfig->m_iHookLanguage == 1)
    {
        if(!_objLocale.Init(wxLANGUAGE_CHINESE_SIMPLIFIED , wxLOCALE_CONV_ENCODING))
            return -1;
    }
    else
    {
        if(!_objLocale.Init(wxLANGUAGE_ENGLISH , wxLOCALE_CONV_ENCODING))
            return -1;
    }
    wxLocale::AddCatalogLookupPathPrefix(wxT(".\\lang"));
    _objLocale.AddCatalog(wxT("lang"));

    return 0;
}

int LingosHookFrame::InitObjects()
{
    //if(_dataConfig->Init() != 0)
    //    return -1;
    //if(_dataConfig->Load() != 0)
    //    return -1;

    if(_objDict->Init() != 0)
        return -1;

    if(_objTag->Init() != 0)
        return -1;

    if(_objMemoryDaily->Init() != 0)
        return -1;

    if(_objHook->Init(*_dataConfig) != 0)
        return -1;

    if(_objSpeak->Init() != 0)
        return -1;

    _objTrayIcon->Init();

    _objPlugin->Init();

	return 0;
}

int LingosHookFrame::LoadObjects()
{
    UpdateConfigData(false);

    LoadHomePage();
    
    _objTag->Load();

    _objDict->GetAllWords();

    if(_dataConfig->m_iDataSyncTag == 1)
    {
        g_objTrigger.OnSortShow(CLHFilterTreeCtrl::FilterType(FMID_TAG - FMID_BEGIN));
    }
    else
    {
        g_objTrigger.OnSortShow(CLHFilterTreeCtrl::FilterType(FMID_CLOSE - FMID_BEGIN));        
    }

//    m_cbWordIndex->SetFocus();

//    _objPlugin->Load();


    ShowHint(_("Ready..."));

    return 0;
}

int LingosHookFrame::LoadHomePage()
{
    if(m_winHTML == NULL)
        return -1;

    if(_dataConfig->m_strHomePage.empty())
    {
        m_winHTML->LoadHomePage();
    }
    else
    {
        m_winHTML->LoadUrl(_dataConfig->m_strHomePage);
    }

    return 0;
}


int LingosHookFrame::UpdateConfigData(bool retrieve)
{
    if(retrieve)
    {
        if(m_rdSetUILAuto->GetValue())
            _dataConfig->m_iIfLanguage = 0;
        else if(m_rdSetUILEnglish->GetValue())
            _dataConfig->m_iIfLanguage = 1;
        else if(m_rdSetUILChinese->GetValue())
            _dataConfig->m_iIfLanguage = 2;
        else
            _dataConfig->m_iIfLanguage = 0;

        _dataConfig->m_iAutoHook = m_cbSetAutoHook->IsChecked() ? 1 : 0;

        _dataConfig->GetLingoesParam(m_textSetLgsLocal->GetValue().c_str());

        _dataConfig->m_iHookLanguage = m_listInfLang->GetSelection();

        _dataConfig->m_iStopAutoRetrieve = m_cbSetStopRetrieve->IsChecked() ? 1 : 0;
        _dataConfig->m_iOpenHotkey = m_cbSetUseHotkey->IsChecked() ? 1 : 0;
        _dataConfig->m_iHotkey = m_listSetHotkey->GetSelection();
        _dataConfig->m_iOpenTrace = m_checkTrace->IsChecked() ? 1 : 0;
//        _dataConfig->m_iDataSyncTag = m_checkSetTagSync->IsChecked() ? 1 : 0;
//        _dataConfig->m_iDataSyncMem = m_checkSetMemSync->IsChecked() ? 1 : 0;
        _dataConfig->m_iHTMLSave = 1;//m_checkHTMLSave->IsChecked() ? 1 : 0;
        _dataConfig->m_iHTMLLoad = 1;//m_checkHTMLLoad->IsChecked() ? 1 : 0;

        _dataConfig->m_iRetrieveDelay = m_sliderSetDelay->GetValue() * 200;

        _dataConfig->m_iSkipError = m_checkIgnoreDict->IsChecked() ? 1 : 0;
        _dataConfig->m_iSkipDict = m_checkSkipDict->IsChecked() ? 1 : 0;
        _dataConfig->m_iSkipHtml = m_checkSkipHtml->IsChecked() ? 1 : 0;

        int sel = m_comboxExpandDict->GetSelection();
        if(sel == 0)
        {
            _dataConfig->m_iExpandDict = -1;
        }
        else
        {
            CLHComboBoxClientData* data = (CLHComboBoxClientData*)m_comboxExpandDict->GetClientObject(sel);
            _dataConfig->m_iExpandDict = data->Index();
        }

        _dataConfig->m_iAutoSpeak = m_cbSetAutoSpeak->IsChecked() ? 1 : 0;
        _dataConfig->m_iUseTidy = 1;//m_checkSetUseTidy->IsChecked() ? 1 : 0;
        
        _dataConfig->m_iFavoriteTab = m_listFavoriteTab->GetSelection();

        _objHook->SetStopRetrieve(_dataConfig->m_iStopAutoRetrieve == 1 ? true : false);

        if(_dataConfig->Save() == 0)
        {
            //wxMessageBox(_("Some configuration data will be not valid until application restart."));
            _objDisplay->ShowInfo(_("Some configuration data will be not valid until application restart."));
        }
        else
        {
            wxMessageBox(_("Retrieve config data failed."));
            return -1;
        }
    }
    else
    {
        switch(_dataConfig->m_iIfLanguage)
        {
        case 0:
            m_rdSetUILAuto->SetValue(true);
            break;
        case 1:
            m_rdSetUILEnglish->SetValue(true);
            break;
        case 2:
            m_rdSetUILChinese->SetValue(true);
            break;
        default:
            m_rdSetUILAuto->SetValue(true);
            break;
        }
        m_textSetLgsLocal->SetValue(_dataConfig->m_strLingoesExec);

        m_cbSetAutoHook->SetValue(_dataConfig->m_iAutoHook == 1);

        m_listInfLang->SetSelection(_dataConfig->m_iHookLanguage);

        m_cbSetStopRetrieve->SetValue(_dataConfig->m_iStopAutoRetrieve == 1 ? true : false);
        if(_dataConfig->m_iOpenHotkey == 1)
        {
            m_cbSetUseHotkey->SetValue(true);
            m_listSetHotkey->Enable();
            m_listSetHotkey->SetSelection(_dataConfig->m_iHotkey);
        }
        else
        {
            m_cbSetUseHotkey->SetValue(false);
            m_listSetHotkey->Enable(false);
            m_listSetHotkey->SetSelection(_dataConfig->m_iHotkey);
        }

//        m_checkSetTagSync->SetValue(_dataConfig->m_iDataSyncTag == 1 ? true : false);
//        m_checkSetMemSync->SetValue(_dataConfig->m_iDataSyncMem == 1 ? true : false);
//        m_checkHTMLSave->SetValue(_dataConfig->m_iHTMLSave == 1 ? true : false);
        //m_checkHTMLLoad->SetValue(_dataConfig->m_iHTMLLoad == 1 ? true : false);
        m_sliderSetDelay->SetValue(_dataConfig->m_iRetrieveDelay / 200);
        m_sliderSetDelay->Enable(_dataConfig->m_iStopAutoRetrieve == 1 ? false : true);

        m_labelSetDelay->SetLabel(wxString::Format(wxT("%d ms"), _dataConfig->m_iRetrieveDelay));

        m_checkTrace->SetValue(_dataConfig->m_iOpenTrace == 1 ? true : false);

        if(_dataConfig->m_iExpandDict == -1)
        {
            m_comboxExpandDict->SetSelection(0);
        }
        else
        {
            CLHComboBoxClientData* data = NULL;
            for(unsigned int i = 0; i < m_comboxExpandDict->GetCount(); ++ i)
            {
                data = (CLHComboBoxClientData*)m_comboxExpandDict->GetClientObject(i);
                if(data != NULL && data->Index() == _dataConfig->m_iExpandDict)
                {
                    m_comboxExpandDict->SetSelection(i);
                    break;
                }
            }
        }
    
        m_checkIgnoreDict->SetValue(_dataConfig->m_iSkipError == 1);
        m_checkSkipDict->SetValue(_dataConfig->m_iSkipDict == 1);
        m_checkSkipHtml->SetValue(_dataConfig->m_iSkipHtml == 1);

        m_cbSetAutoSpeak->SetValue(_dataConfig->m_iAutoSpeak == 1);
        //m_checkSetUseTidy->SetValue(_dataConfig->m_iUseTidy == 1);

        m_listFavoriteTab->SetSelection(_dataConfig->m_iFavoriteTab);

        m_noteContext->SetSelection(_dataConfig->m_iFavoriteTab);
    }
    return 0;
}

//int LingosHookFrame::MakeContextMenu(const wxString& title, bool isword, int orig, const wxPoint& pos)
//{
//    wxMenu menu;
//    
//    if(orig == 0 || orig == 2)
//    {
//        menu.SetTitle(title);
//        menu.Append(IMID_SPEAK, _("Speak.."));
//        menu.AppendSeparator();
//        menu.Append(wxID_ANY, _("Copy to tag"), MakeTagSubMenu(IMID_TAGCOPY_START));
//        if(orig == 2)
//        {//pop on Tag panel
//            menu.Append(IMID_TAGREMOVE, _("Remove from this tag"));
//        }
//        
//        menu.AppendSeparator();
//        menu.Append(IMID_COPY, _("Copy"));
//        menu.AppendSeparator();
//        menu.Append(IMID_DELETE, _("Delete"));
//    }
//    else if(orig == 1)
//    {
//        menu.Append(IMID_SETTAGDEFAULT, _("Set as default"));
//    }
//    else
//    {
//        return 0;
//    }
//
//    PopupMenu(&menu, pos.x, pos.y);
//
//    return 0;
//}

int LingosHookFrame::MakeWordContextMenu(const wxString& title, const wxPoint& pos)
{
    wxMenu menu;

    menu.SetTitle(title);
    menu.Append(IMID_SPEAK, _("Speak.."));
    menu.AppendSeparator();
    menu.Append(wxID_ANY, _("Copy to tag"), MakeTagSubMenu(IMID_TAGCOPY_START));
    
    menu.AppendSeparator();
    menu.Append(IMID_COPY, _("Copy"));
    menu.AppendSeparator();
    menu.Append(IMID_DELETE, _("Delete"));

    PopupMenu(&menu, pos.x, pos.y);

    return 0;
}

int LingosHookFrame::MakeWordContextMenu(const wxString& title, int filtertype, const wxPoint& pos)
{
    wxMenu menu;

    menu.SetTitle(title);
    menu.Append(IMID_SPEAK, _("Speak.."));
    menu.AppendSeparator();
    menu.Append(wxID_ANY, _("Copy to tag"), MakeTagSubMenu(IMID_TAGCOPY_START));
    if(filtertype == CLHFilterTreeItemData::IT_TAG)
    {//pop on Tag panel
        menu.Append(IMID_TAGREMOVE, _("Remove from this tag"));
    }
    
    menu.AppendSeparator();
    menu.Append(IMID_COPY, _("Copy"));
    menu.AppendSeparator();
    menu.Append(IMID_DELETE, _("Delete"));

    PopupMenu(&menu, pos.x, pos.y);

    return 0;
}

int LingosHookFrame::MakeFilterContextMenu(const wxString& title, int filtertype, const wxPoint& pos)
{
    wxTreeItemId item = m_treeFilter->GetSelection();
    if(!item.IsOk())
        return 0;
    bool enabled = (m_treeFilter->GetChildrenCount(item) > 0);

    wxMenu menu;    

    if(filtertype == CLHFilterTreeCtrl::FT_TAG)
    {
        menu.Append(IMID_SETTAGDEFAULT, _("Set as default"));
        menu.AppendSeparator();
		menu.Append(FMID_MOVEALLBYTAG, _("Move all words to other tag"), MakeTagSubMenu(IMID_TAGMOVEALL_START))->Enable(enabled);
		menu.AppendSeparator();
		menu.Append(FMID_REMOVEWORDBYTAG, _("Delete all words under the tag"))->Enable(enabled);
		
		//menu.Append(wxID_ANY, _("Copy all words to other tag"))->Enable(enabled);
    }
    else if(filtertype == CLHFilterTreeCtrl::FT_SCORE)
    {
        menu.Append(FMID_REMOVEWORDBYSCORE, _("Delete all words under the score"))->Enable(enabled);
    }
    else if(filtertype == CLHFilterTreeCtrl::FT_DATE)
    {
        menu.Append(FMID_REMOVEWORDBYDATE, _("Delete all words under the date"))->Enable(enabled);
    }
    //else if(filtertype == CLHFilterTreeItemData::IT_DATE_MONTH)
    //{
    //    menu.Append(IMID_REMOVEWORDBYDATE_MONTH, _("Remove all words under the date"));
    //}

    PopupMenu(&menu, pos.x, pos.y);

    return 0;
}

wxMenu* LingosHookFrame::MakeTagSubMenu(int baseid)
{
    wxMenu* menu = new wxMenu();
    long item = -1;
    while(1)
    {
        item = m_listTagMgnt->GetNextItem(item);
        if(item == -1)
            break;
        menu->Append(baseid + item, m_listTagMgnt->GetItemText(item));
    };
    return menu;
}


int LingosHookFrame::CallHook(bool hook)
{
    if(hook)
    {
        _objHook->SetHook();
    }
    else
    {
        _objHook->SetUnhook();
    }
    return 0;
}


void LingosHookFrame::HookTextProc(const wxString &text)
{

	if(_dataConfig->m_iOpenTrace == 1)
		m_textTrace->AppendText(wxT("\n----- TEXT -----\n") + text);
}

void LingosHookFrame::HookHTMLProc(const wxString &html)
{
	if(_dataConfig->m_iOpenTrace == 1)
    {
        if(_objDisplay.get() != NULL)
            _objDisplay->TraceHTML(html);
    }
    _objDict->HTMLProc(html);//, _dataConfig->m_iDataProcFlag);
}

void LingosHookFrame::HookCDProc(const wxString& str)
{
    _objDict->CacheWord(str.Lower());
}

void LingosHookFrame::SetHookButton(bool checked)
{
    if(checked)
    {
        if(_objTrayIcon != NULL)
            _objTrayIcon->SetStatus(CTrayIconObject::TS_HOOK);

        ShowHint(_("Set unhook..."));
        m_btnHook->SetValue(true);
        m_btnHook->SetLabel(_("Unhook"));
        ShowHint(_("Ready..."));
    }
    else
    {
        if(_objTrayIcon != NULL)
            _objTrayIcon->SetStatus(CTrayIconObject::TS_NORMAL);

        ShowHint(_("Set hook..."));
        m_btnHook->SetValue(false);
        m_btnHook->SetLabel(_("Hook"));
        ShowHint(_("Ready..."));
    }
}

void LingosHookFrame::SetCloseFlag(bool canclose)
{
    _bSysCanClose = canclose;
}

void LingosHookFrame::ShowHint(const wxString& hint)
{
    m_labelInfo->SetLabel(hint);
}

int LingosHookFrame::CopyWord(const wxString& word)
{
    if(wxTheClipboard->Open())
    {
        wxTheClipboard->SetData(new wxTextDataObject(word));
        wxTheClipboard->Close();
    }
    return 0;
}

int LingosHookFrame::SpeakWord(const wxString& word)
{
    _objSpeak->Speak(word);
    return 0;
}

int LingosHookFrame::RemoveWord(const wxString& word)
{
    return _objDict->RemoveWord(word);
    //int wordid = -1;
    //if(_objDict->GetWordID(word.c_str(), wordid) != 0)
    //    return -1;
    //return RemoveWord(wordid);
}

int LingosHookFrame::RemoveWord(int wordid)
{
    return _objDict->RemoveWord(wordid);
}

int LingosHookFrame::CopyToTag(const wxString &word, int tagpos)
{
    int wordid = -1;
    if(_objDict->GetWordID(word.c_str(), wordid) != 0)
        return -1;
    int tagid = m_listTagMgnt->GetItemData(tagpos);
    if(tagid == -1)
        return -1;
    return _objTag->AddIndex(wordid, tagid);
}

int LingosHookFrame::RemoveFromTag(int wordid, int tagid)
{
    return _objTag->DeleteIndex(wordid, tagid);
}

/////////////////////////////////////////////////

WXLRESULT LingosHookFrame::MSWWindowProc(WXUINT message, WXWPARAM wParam, WXLPARAM lParam)
{
    if(message == WM_OBJECT_INIT)
    {
        if(InitObjects() != 0)
        {
            _bSysCanClose = true;
            wxMessageBox(_("Sorry, initial process failed !"));
        }
        LoadObjects();
    }
    else if(message == WM_SET_HOOK)
    {
        CallHook(wParam == 1);
    }
    else if(message == WM_SET_AUTORETRIEVE)
    {
        _dataConfig->m_iStopAutoRetrieve = (wParam == 0 ? 1 : 0);
        _objHook->SetStopRetrieve(wParam == 0);
    }
    else
    {
	    if(_objHook.get() != NULL)
		    _objHook->MessageProc(message, wParam, lParam);
        
        //if(message == WM_HOTKEY && _objHook.get() != NULL)
        //    _objHook->MessageProc(message, wParam, lParam);
    }

	return wxFrame::MSWWindowProc(message, wParam, lParam);
}

void LingosHookFrame::OnClose(wxCloseEvent& event)
{
#ifdef __LH_DEBUG__
    event.Skip();
    return;
#endif
    if(!_bSysCanClose)
        Show(false);
    else
        event.Skip();
}

void LingosHookFrame::OnWordIndexEnter(wxCommandEvent &event)
{
    wxString str = event.GetString();
    if(!str.empty())
    {
        if(m_cbWordIndex->FindString(str) == -1)
        {
            m_cbWordIndex->Append(str);
        }
    }
}


void LingosHookFrame::OnWordIndexText(wxCommandEvent &event)
{
    m_listIndex->FindItem(event.GetString());
    //m_cbWordIndex->SetValue(event.GetString());
}

void LingosHookFrame::OnWordIndexFocus(wxCommandEvent& event)
{
    if(event.GetInt() == 1)
        m_winHTML->Enable(false);
    else
        m_winHTML->Enable(true);
}

void LingosHookFrame::OnIndexDClick(wxCommandEvent &event)
{
}

void LingosHookFrame::OnIndexSelected(wxCommandEvent &event)
{
    int pos = m_noteIndex->GetSelection();
    if(pos == INID_INDEX)
    {
        if(event.IsSelection())
        {
            m_listIndex->SetSelection(event.GetSelection());
            _objDict->GetResult((int)event.GetClientData());
        }
    }
}

void LingosHookFrame::OnIndexDelete(wxCommandEvent& event)
{
    if(event.IsSelection())
    {
        int sel = event.GetInt();
        RemoveWord((int)event.GetClientData());
    }
}

void LingosHookFrame::OnIndexFindItem(wxCommandEvent& event)
{
//    m_listIndex->Select(event.GetInt());
    //m_cbWordIndex->SetFocus();
}

void LingosHookFrame::OnIndexContextMenu(wxCommandEvent& event)
{
    wxPoint pos = ::wxGetMousePosition();
    pos = ScreenToClient(pos);

    MakeWordContextMenu(event.GetString(), pos);
}

void LingosHookFrame::OnIndexFocus(wxCommandEvent& event)
{
    if(event.GetInt() == 1)
        m_winHTML->Enable(false);
    else
        m_winHTML->Enable(true);
}

void LingosHookFrame::OnNoteIndexChanged(wxNotebookEvent &event)
{
    int oldpos = event.GetOldSelection();
    if(oldpos == INID_FILTER)
    {//tag
        if(_dataConfig->m_iDataSyncTag != 1)
            g_objTrigger.OnSortShow(CLHFilterTreeCtrl::FilterType(FMID_CLOSE - FMID_BEGIN));        
    }

    int pos = event.GetSelection();
    if(pos == INID_MEMORY)
    {//Memory Daily
        if(_dataConfig->m_iDataSyncMem != 1 || _objMemoryDaily->IsBuilt() == false)
        {
            if(_objMemoryDaily->Load() != 0)
            {
                wxMessageBox(_("MemoryDaily Object load data failed."));
            }
        }
    }
}

void LingosHookFrame::OnNoteContextChanged(wxNotebookEvent &event)
{
    int pos = event.GetSelection();
    if(pos == CNID_PLUGINS)
    {
        _objPlugin->Load();
    }

    //event.Skip();
    //wxLogDebug(wxT("Event handler (LingosHookFrame::OnNoteContextChanged) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}

void LingosHookFrame::OnBtnHook(wxCommandEvent &event)
{
    bool check = event.IsChecked();

    m_btnHook->SetValue(!check);

    CallHook(check);
}

void LingosHookFrame::OnBtnSetApply(wxCommandEvent &event)
{
    if(UpdateConfigData(true) != 0)
    {
        UpdateConfigData(false);
    }
}

void LingosHookFrame::OnBtnSetLgsBrowse(wxCommandEvent &event)
{
    wxFileDialog dlg(this, _("Select Lingoes location.."), wxEmptyString, wxEmptyString, wxT("Execute Files(*.exe)|*.exe|All Files(*.*)|*.*"), wxFD_OPEN);
    if(dlg.ShowModal() == wxID_OK)
    {
        m_textSetLgsLocal->SetValue(dlg.GetPath());
    }
}

void LingosHookFrame::OnListTagMgntDeselect(wxListEvent &event)
{
    m_btnTagRename->Enable(false);
    m_btnTagRemove->Enable(false);
    m_btnTagDefault->Enable(false);
}

void LingosHookFrame::OnListTagMgntSelect(wxListEvent &event)
{
    if((int)event.GetData() != _objTag->SysDefTag())
    {
        m_btnTagRename->Enable(true);
        m_btnTagRemove->Enable(true);
    }
    m_btnTagDefault->Enable(true);
}

void LingosHookFrame::OnBtnTagSetDefault(wxCommandEvent &event)
{
    long item = m_listTagMgnt->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    if(item != -1)
    {
        _objTag->UpdateDefaultTag(m_listTagMgnt->GetItemData(item));
    }
}

void LingosHookFrame::OnBtnTagAdd(wxCommandEvent &event)
{
    TagInputDialog dlg(this);
    if(dlg.ShowModal() == wxID_OK)
    {
        _objTag->InsertTag(dlg.Title(), dlg.Description());
    }
}

void LingosHookFrame::OnBtnTagRename(wxCommandEvent &event)
{
    long item = m_listTagMgnt->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    if(item != -1)
    {
        TagInputDialog dlg(this);
        int tagid = m_listTagMgnt->GetItemData(item);
        dlg.SetTagTitle(_objTag->GetTitle(tagid));
        dlg.SetTagDescription(_objTag->GetDescription(tagid));
        if(dlg.ShowModal() == wxID_OK)
        {
            _objTag->RenameTag(tagid, dlg.Title(), dlg.Description());
        }
    }
}


void LingosHookFrame::OnBtnTagRemove(wxCommandEvent &event)
{
    long item = m_listTagMgnt->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    if(item != -1)
    {
        wxString str = _objTag->GetTitle(m_listTagMgnt->GetItemData(item));
        str = _("Are you sure that delete '") + str + _("' tag ?");
        if(wxMessageBox(str, wxT("LingosHookApp"), wxCENTRE | wxYES_NO | wxICON_QUESTION) == wxYES)
            _objTag->RemoveTag(m_listTagMgnt->GetItemData(item));
    }
}

void LingosHookFrame::OnBtnFilter(wxCommandEvent &event)
{
    wxPoint pos = m_btnFilter->GetPosition();
    pos.x += 8;
    pos.y = m_btnFilter->GetSize().y + 8;
    
    wxMenu menu;
    menu.Append(FMID_TAG, _("Classification by Tag"));
    menu.Append(FMID_DATE, _("Classification by Date"));
    menu.Append(FMID_COUNTER, _("Classification by Score"));
    //menu.Enable(FMID_COUNTER, false);
    menu.AppendSeparator();
    menu.Append(FMID_CLOSE, _("Close"));

    PopupMenu(&menu, pos.x, pos.y);
}

void LingosHookFrame::OnTreeFilterChange(wxTreeEvent &event)
{
    wxTreeItemId item = event.GetItem();
    CLHFilterTreeItemData* data = (CLHFilterTreeItemData*)m_treeFilter->GetItemData(item);
    if(data != NULL && data->Type() == CLHFilterTreeItemData::IT_WORD)
    {
        _objDict->GetResult(data->ID());
    }
    else
    {
        m_treeResult->DeleteAllItems();
        m_winHTML->LoadBlankPage();
        //LoadHomePage();
    }
}

void LingosHookFrame::OnTreeFilterFocus(wxCommandEvent& event)
{
    if(event.GetInt() == 1)
        m_winHTML->Enable(false);
    else
        m_winHTML->Enable(true);
}

void LingosHookFrame::OnMenuFilter(wxCommandEvent& event)
{
    g_objTrigger.OnSortShow(CLHFilterTreeCtrl::FilterType(event.GetId() - FMID_BEGIN));
}

void LingosHookFrame::OnContextMenuFilter(wxCommandEvent& event)
{
    wxTreeItemId item = m_treeFilter->GetSelection();
    if(item.IsOk())
    {
        wxString str = _("Are you sure that delete all words under this node ?");
        if(wxMessageBox(str, wxT("LingosHookApp"), wxCENTRE | wxYES_NO | wxICON_QUESTION) != wxYES)
            return;        

        wxTreeItemIdValue cookie;
        wxTreeItemId id = m_treeFilter->GetFirstChild(item, cookie);
        while(id.IsOk())
        {
            const CLHFilterTreeItemData* cd = (const CLHFilterTreeItemData*)m_treeFilter->GetItemData(id);
            ShowHint(_("Delete word : ") + m_treeFilter->GetItemText(id) + _(" ..."));
            RemoveWord(cd->ID());
            id = m_treeFilter->GetFirstChild(item, cookie);
        }
        ShowHint(_("Ready..."));
    }
}

void LingosHookFrame::OnMenuIndexTagMoveAll(wxCommandEvent& event)
{

}

void LingosHookFrame::OnBtnMemRemove(wxCommandEvent &event)
{
    int wordid = _objMemoryDaily->GetWordID();
    RemoveWord(wordid);
}

void LingosHookFrame::OnBtnMemNext(wxCommandEvent &event)
{
    int offset = 0;
    if(m_radioMemLevel0->GetValue() == true)
    {
        offset = MemoryDaily::LO_LEVEL_1;
    }
    else if(m_radioMemLevel1->GetValue() == true)
    {
        offset = MemoryDaily::LO_LEVEL_2;
    }
    else if(m_radioMemLevel2->GetValue() == true)
    {
        offset = MemoryDaily::LO_LEVEL_3;
    }
    else if(m_radioMemLevel3->GetValue() == true)
    {
        offset = MemoryDaily::LO_LEVEL_4;
    }
    else
    {
        return;
    }
    _objMemoryDaily->NextWord(offset);
}

void LingosHookFrame::OnRadioMemLevel(wxCommandEvent &event)
{
    if(_objDict->GetResult(_objMemoryDaily->GetWordID()) == 0)
    {
        m_btnMemRemove->Enable(true);
        m_btnMemNext->Enable(true);
    }
}

void LingosHookFrame::OnRadioMemLevelFocus(wxCommandEvent& event)
{
    if(event.GetInt() == 1)
        m_winHTML->Enable(false);
    else
        m_winHTML->Enable(true);
}

void LingosHookFrame::OnBtnMemRegen(wxCommandEvent &event)
{
    if(_objMemoryDaily->Load() != 0)
    {
        wxMessageBox(_("MemoryDaily Object load data failed."));
    }
}

void LingosHookFrame::OnBtnAboutHelp(wxCommandEvent &event)
{
    wxString cmd = wxT("http://www.cppblog.com/codejie");
    ::wxLaunchDefaultBrowser(cmd);}


void LingosHookFrame::OnBtnAboutSend(wxCommandEvent &event)
{
    wxString cmd = wxT("mailto:codejie@gmail.com");
    ::wxLaunchDefaultBrowser(cmd);}


void LingosHookFrame::OnBtnAboutPost(wxCommandEvent &event)
{
    wxString cmd = wxT("http://www.cppblog.com/codejie");
    ::wxLaunchDefaultBrowser(cmd);
}

void LingosHookFrame::OnBtnAboutOpenSource(wxCommandEvent &event)
{
    wxString cmd = wxT("http://code.google.com/p/lingoshook");
    ::wxLaunchDefaultBrowser(cmd);
}

void LingosHookFrame::OnBtnAboutDonate(wxCommandEvent &event)
{
    wxString cmd = wxT("http://shop64703519.taobao.com/");
    ::wxLaunchDefaultBrowser(cmd);
}

void LingosHookFrame::OnMenuIndexSpeak(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    SpeakWord(menu->GetTitle());
}

void LingosHookFrame::OnMenuIndexCopy(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    CopyWord(menu->GetTitle());
}

void LingosHookFrame::OnMenuIndexDelete(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    RemoveWord(menu->GetTitle());
}

void LingosHookFrame::OnMenuIndexTagCopy(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    int tagpos = event.GetId() - IMID_TAGCOPY_START;
    CopyToTag(menu->GetTitle(), tagpos);
}

void LingosHookFrame::OnMenuIndexTagRemove(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    wxTreeItemId item = m_treeFilter->GetSelection();

    if(item.IsOk())
    {
        if(m_treeFilter->GetItemText(item) == menu->GetTitle())
        {
            CLHFilterTreeItemData* idata = (CLHFilterTreeItemData*)m_treeFilter->GetItemData(item);
//            if(idata != NULL && idata->Type() == CLHFilterTreeItemData::IT_WORD)
            RemoveFromTag(idata->ID(), idata->PID());
        }
    }
}

void LingosHookFrame::OnMenuSetTagDefault(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    wxTreeItemId item = m_treeFilter->GetSelection();

    if(item.IsOk())
    {
        CLHFilterTreeItemData* idata = (CLHFilterTreeItemData*)m_treeFilter->GetItemData(item);
        _objTag->UpdateDefaultTag(idata->ID());
    }
}

void LingosHookFrame::OnTreeFilterContextMenu(wxCommandEvent& event)
{
    wxPoint pos = ::wxGetMousePosition();
    pos = ScreenToClient(pos);

    int dt = event.GetInt();

    if(dt == CLHFilterTreeItemData::IT_WORD)
    {
        MakeWordContextMenu(event.GetString(), m_treeFilter->GetFilterType(), pos);
    }
    else
    {
        MakeFilterContextMenu(event.GetString(), m_treeFilter->GetFilterType(), pos);
    }
}

void LingosHookFrame::OnTreeResultContextMenu(wxCommandEvent& event)
{
    wxPoint pos = ::wxGetMousePosition();
    pos = ScreenToClient(pos);

    MakeWordContextMenu(event.GetString(), pos);
}

void LingosHookFrame::OnCheckIgnoreDict(wxCommandEvent &event)
{
    //if(event.IsChecked())
    //{
    //    //m_checkSkipDict->SetValue(false);
    //    //m_checkSkipHtml->SetValue(false);
    //    //m_checkHTMLSave->SetValue(true);
    //    //m_checkHTMLLoad->SetValue(true);
    //}
}

void LingosHookFrame::OnCheckSkipHTML(wxCommandEvent &event)
{
    m_btnSetDictStoreChoice->Enable(!event.IsChecked());
    m_btnSetAnalysisFilter->Enable(!event.IsChecked());
    //if(event.IsChecked())
    //{
    //    //m_checkIgnoreDict->SetValue(false);
    //    //m_checkSkipDict->SetValue(false);
    //    //m_checkHTMLSave->SetValue(true);
    //    //m_checkHTMLLoad->SetValue(true);
    //}
}

void LingosHookFrame::OnCheckSkipDict(wxCommandEvent &event)
{
    //if(event.IsChecked())
    //{
    //    //m_checkIgnoreDict->SetValue(false);
    //    //m_checkSkipHtml->SetValue(false);
    //    //m_checkHTMLSave->SetValue(true);
    //    //m_checkHTMLLoad->SetValue(true);
    //}
}

void LingosHookFrame::OnMemTypeFocus(wxCommandEvent& event)
{
    if(event.GetInt() == 1)
        m_winHTML->Enable(false);
    else
        m_winHTML->Enable(true);
}

void LingosHookFrame::OnMemTypeKeyDown(wxCommandEvent &event)
{
    int key = event.GetInt();// - 48;
    
    switch(key)
    {
    case 1 + 48:
    case VK_NUMPAD1 + 0xE4:
        m_radioMemLevel0->SetValue(true);
        break;
    case 2+ 48:
    case VK_NUMPAD2 + 0xE4:
        m_radioMemLevel1->SetValue(true);
        break;
    case 3 + 48:
    case VK_NUMPAD3 + 0xE4:
        m_radioMemLevel2->SetValue(true);
        break;
    case 4 + 48:
    case VK_NUMPAD4 + 0xE4:
        m_radioMemLevel3->SetValue(true);
        break;
    case 0 + 48:
    case VK_NUMPAD0 + 0xE4:
        {
            if(m_btnMemRemove->IsEnabled())
            {
                int wordid = _objMemoryDaily->GetWordID();
                RemoveWord(wordid);
            }
        }
        return;
    case VK_ESCAPE:
        m_textMemType->SetValue(wxEmptyString);
        return;
    case 126:
        _objSpeak->Speak(_objMemoryDaily->GetWord());
        return;
    default:
        return;
    }

    if(_objDict->GetResult(_objMemoryDaily->GetWordID()) == 0)
    {
        m_btnMemRemove->Enable(true);
        m_btnMemNext->Enable(true);
    }
//    m_textMemType->SetFocus();
}

void LingosHookFrame::OnMemTypeText(wxCommandEvent &event)
{
    wxString str = event.GetString();
    if(str == _objMemoryDaily->GetWord())
    {
        m_textMemType->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("MS Shell Dlg 2")));
    }
    else
    {
        m_textMemType->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));
    }
}

void LingosHookFrame::OnBtnSetDictChoice(wxCommandEvent &event)
{
    CHtmlDictLoadChoiceDialog dlg(_objDict.get(), this, wxID_ANY, wxEmptyString);
    
//    _objDict->ShowHtmlDictLoadInfo(dlg);

    if(dlg.ShowModal() == wxID_OK)
    {
        _objDict->GetHtmlDictLoadInfo(dlg);
        _dataConfig->SetLoadHtmlDict(_dataConfig->m_iLoadHtmlDict);
    }
}

void LingosHookFrame::OnBtnSetDictStoreChoice(wxCommandEvent &event)
{
    CHtmlDictStoreChoiceDialog dlg(_objDict.get(), this, wxID_ANY, wxEmptyString);

//    _objDict->ShowHtmlDictStoreInfo(dlg);

    if(dlg.ShowModal() == wxID_OK)
    {
        _objDict->GetHtmlDictStoreInfo(dlg);
    }
}

void LingosHookFrame::OnBtnSetAnalysisFilter(wxCommandEvent &event)
{
    CAnalysisFilterDialog dlg(_dataConfig.get(), this, wxID_ANY, wxEmptyString);
    if(dlg.ShowModal() == wxID_OK)
    {
        _dataConfig->m_iAFCaseInsensitive = dlg.CheckBoxCase()->IsChecked() ? 1 : 0;
        _dataConfig->m_iAFOneWordEachDict = dlg.CheckBoxOneWordEachDict()->IsChecked() ? 1 : 0;
        _dataConfig->m_iAFOneWordAllDict = dlg.CheckBoxOneWordAllDict()->IsChecked() ? 1 : 0;
        _dataConfig->SetAnalysisFilter();
    }
}

void LingosHookFrame::OnScrollSetDelayEnd(wxScrollEvent& event)
{
    //event.GetInt();
    m_labelSetDelay->SetLabel(wxString::Format(wxT("%d ms"), event.GetInt() * 200));
}

void LingosHookFrame::OnListPluginsDeselected(wxListEvent &event)
{
    m_btnPluginsDetail->Enable(false);
    m_btnPluginsRun->Enable(false);
}

void LingosHookFrame::OnListPluginsSelected(wxListEvent &event)
{
    m_btnPluginsDetail->Enable(true);
    m_btnPluginsRun->Enable(true);
}

void LingosHookFrame::OnBtnPluginsDetail(wxCommandEvent &event)
{
    long item = m_listPlugins->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    if(item != -1)
    {
        _objPlugin->ShowPlugin(m_listPlugins->GetItemData(item));
    }
}

void LingosHookFrame::OnBtnPluginsRun(wxCommandEvent &event)
{
    long item = m_listPlugins->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    if(item != -1)
    {
        _objPlugin->ActivePlugin(m_listPlugins->GetItemData(item));
    }
}

void LingosHookFrame::OnCheckSetStopRetrieve(wxCommandEvent &event)
{
    m_sliderSetDelay->Enable(!event.IsChecked());
}

void LingosHookFrame::OnCheckSetUseHotkey(wxCommandEvent &event)
{
    m_listSetHotkey->Enable(event.IsChecked());
}

////
void LingosHookFrame::OnBtnDebug(wxCommandEvent &event)
{
#ifndef __LH_DEBUG__
    return;
#endif
    wxFileDialog dlg(this, _("Select a HTML File.."), wxEmptyString, wxEmptyString, wxT("HTML Files(*.html;*.htm)|*.html;*.htm|All Files(*.*)|*.*"), wxFD_OPEN);
    if(dlg.ShowModal() == wxID_OK)
    {
        wxString file = dlg.GetPath();
        m_textDebug->SetValue(file);
        wxFileInputStream input(file);
        wxTextInputStream ifs(input);
        wxString str;
        while(input.IsOk() && !input.Eof())
        {
            str += ifs.ReadLine();
        }
        //str.erase(0, 3);
        m_textTrace->SetValue(str); 
        HookHTMLProc(str);
    }
}
