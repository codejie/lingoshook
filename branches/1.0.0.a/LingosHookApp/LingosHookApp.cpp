// -*- C++ -*- generated by wxGlade 0.6.3 on Mon Nov 23 15:38:51 2009

#include <wx/app.h>
#include <wx/clipbrd.h>

#include "Consts.h"
#include "ConfigData.h"
#include "HookObject.h"
#include "DictObject.h"
#include "TagObject.h"
#include "DisplayObject.h"
#include "TriggerObject.h"
#include "TagInputDialog.h"
#include "SpeakObject.h"

#include "LingosHookApp.h"

// begin wxGlade: ::extracode
// end wxGlade

class MyApp: public wxApp {
public:
    bool OnInit();
};

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{
    wxInitAllImageHandlers();
    LingosHookFrame* MainFrame = new LingosHookFrame(NULL, wxID_ANY, wxEmptyString);
    SetTopWindow(MainFrame);
    MainFrame->Show();
    return true;
}

LingosHookFrame::LingosHookFrame(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
, _objHook(NULL)
, _dataConfig(NULL)
, _objDict(NULL)
, _objTag(NULL)
, _objDisplay(NULL)
, _objMemoryDaily(NULL)
, _objSpeak(NULL)
{
    // begin wxGlade: LingosHookFrame::LingosHookFrame
    m_splitWindow = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSP_3D|wxSP_BORDER);
    window_1_pane_2 = new wxPanel(m_splitWindow, wxID_ANY);
    m_noteContext = new wxNotebook(window_1_pane_2, CIID_PAGE_CONTEXT, wxDefaultPosition, wxDefaultSize, wxNB_BOTTOM);
    m_noteContext_pane_6 = new wxPanel(m_noteContext, wxID_ANY);
    m_noteContext_pane_5 = new wxPanel(m_noteContext, wxID_ANY);
    m_noteContext_pane_3 = new wxPanel(m_noteContext, wxID_ANY);
    m_noteContext_pane_4 = new wxScrolledWindow(m_noteContext, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL);
    m_noteContext_pane_2 = new wxPanel(m_noteContext, wxID_ANY);
    notebook_2_pane_1 = new wxPanel(m_noteContext, wxID_ANY);
    window_1_pane_1 = new wxPanel(m_splitWindow, wxID_ANY);
    m_noteIndex = new wxNotebook(window_1_pane_1, CIID_PAGE_INDEX, wxDefaultPosition, wxDefaultSize, wxNB_BOTTOM);
	m_noteIndex_pane_3 = new wxPanel(m_noteIndex, wxID_ANY);
    m_noteIndex_pane_2 = new wxPanel(m_noteIndex, wxID_ANY);
    sizer_27_staticbox = new wxStaticBox(m_noteIndex_pane_3, -1, wxT("Memory Daily"));
    sizer_15_staticbox = new wxStaticBox(m_noteContext_pane_4, -1, wxT("Lingoes Configuration"));
    sizer_44_staticbox = new wxStaticBox(m_noteContext_pane_4, -1, wxT("Forced HTML Data Storage Mode"));
    sizer_16_staticbox = new wxStaticBox(m_noteContext_pane_4, -1, wxT("Application Configuration"));
    sizer_18_staticbox = new wxStaticBox(m_noteContext_pane_4, -1, wxT("Debug Configuration"));
    sizer_13_staticbox = new wxStaticBox(m_noteContext_pane_3, -1, wxT("Tags Management"));
    notebook_1_pane_1 = new wxPanel(m_noteIndex, wxID_ANY);
    const wxString *m_cbWordIndex_choices = NULL;
    m_cbWordIndex = new wxComboBox(notebook_1_pane_1, CIID_TEXT_INDEX, wxT(""), wxDefaultPosition, wxDefaultSize, 0, m_cbWordIndex_choices, wxCB_DROPDOWN | wxTE_PROCESS_ENTER);
    const wxString *m_listIndex_choices = NULL;
    m_listIndex = new CLHListBox(notebook_1_pane_1, CIID_LIST_INDEX, wxDefaultPosition, wxDefaultSize, 0, m_listIndex_choices, wxLB_SINGLE|wxLB_SORT);
    m_btnFilter = new wxButton(m_noteIndex_pane_2, XIID_BUTTON_FILTER, wxT("Tag"), wxDefaultPosition, wxDefaultSize, wxBU_LEFT|wxNO_BORDER);
    m_treeFilter = new CLHFilterTreeCtrl(m_noteIndex_pane_2, CIID_TREE_FILTER, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxTR_HIDE_ROOT|wxSUNKEN_BORDER);
    m_textMemWord = new wxStaticText(m_noteIndex_pane_3, wxID_ANY, wxT("No Word"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE|wxST_NO_AUTORESIZE);
    m_textMemScore = new wxStaticText(m_noteIndex_pane_3, wxID_ANY, wxT("Scroe:-1"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT|wxST_NO_AUTORESIZE);
    static_line_1 = new wxStaticLine(m_noteIndex_pane_3, wxID_ANY);
    label_5 = new wxStaticText(m_noteIndex_pane_3, wxID_ANY, wxT("After seeing the above word, "));
    label_6 = new wxStaticText(m_noteIndex_pane_3, wxID_ANY, wxT("what are you feeling?"));
    m_radioMemLevel0 = new wxRadioButton(m_noteIndex_pane_3, CIID_RADIO_MEMLEVEL1, wxT("Very easy!"));
    m_radioMemLevel1 = new wxRadioButton(m_noteIndex_pane_3, CIID_RADIO_MEMLEVEL2, wxT("Know it.."));
    m_radioMemLevel2 = new wxRadioButton(m_noteIndex_pane_3, CIID_RADIO_MEMLEVEL3, wxT("Fuzzy.."));
    m_radioMemLevel3 = new wxRadioButton(m_noteIndex_pane_3, CIID_RADIO_MEMLEVEL4, wxT("What's it?!"));
    static_line_2 = new wxStaticLine(m_noteIndex_pane_3, wxID_ANY);
    m_btnMemRemove = new wxButton(m_noteIndex_pane_3, CIID_BUTTON_MEMREMOVE, wxT("Delete"));
    panel_5 = new wxPanel(m_noteIndex_pane_3, wxID_ANY);
    m_btnMemNext = new wxButton(m_noteIndex_pane_3, CIID_BUTTON_MEMNEXT, wxT("Next"));
    panel_6 = new wxPanel(m_noteIndex_pane_3, wxID_ANY);
    static_line_3 = new wxStaticLine(m_noteIndex_pane_3, wxID_ANY);
    panel_7 = new wxPanel(m_noteIndex_pane_3, wxID_ANY);
    m_btnMemRegen = new wxButton(m_noteIndex_pane_3, CIID_BUTTON_MEMREGEN, wxT("Re-Generate"));
    panel_8 = new wxPanel(m_noteIndex_pane_3, wxID_ANY);
    m_treeResult = new CLHResultTreeCtrl(notebook_2_pane_1, CIID_TREE_RESULT, wxDefaultPosition, wxDefaultSize, wxTR_HAS_BUTTONS|wxTR_LINES_AT_ROOT|wxTR_DEFAULT_STYLE|wxSUNKEN_BORDER);
    m_winHTML = new wxHtmlWindow(m_noteContext_pane_2, wxID_ANY);
    const wxString m_radioIfLang_choices[] = {
        wxT("Auto-Detection"),
        wxT("English"),
        wxT("Chinese")
    };
    m_radioIfLang = new wxRadioBox(m_noteContext_pane_4, wxID_ANY, wxT("User Interface Language"), wxDefaultPosition, wxDefaultSize, 3, m_radioIfLang_choices, 0, wxRA_SPECIFY_COLS);
    m_checkAutoHook = new wxCheckBox(m_noteContext_pane_4, wxID_ANY, wxT("Auto-Hook"));
    m_checkHotkey = new wxCheckBox(m_noteContext_pane_4, CIID_CHECKBOX_HOTKEY, wxT("Use Hotkey"));
    const wxString m_listHotkey_choices[] = {
        wxT("Ctrl+F10"),
        wxT("Alt+Ctrl+F10"),
        wxT("Ctrl+F11"),
        wxT("Alt+Ctrl+F11"),
        wxT("Ctrl+F12"),
        wxT("Alt+Ctrl+F12")		
    };
	m_listHotkey = new wxComboBox(m_noteContext_pane_4, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, 6, m_listHotkey_choices, wxCB_DROPDOWN|wxCB_READONLY);
    m_checkAutoSpeak = new wxCheckBox(m_noteContext_pane_4, wxID_ANY, wxT("Auto Speak"));
    label_1 = new wxStaticText(m_noteContext_pane_4, wxID_ANY, wxT("Data Synchronization"));
    m_checkSetTagSync = new wxCheckBox(m_noteContext_pane_4, wxID_ANY, wxT("Tags"));
    m_checkSetMemSync = new wxCheckBox(m_noteContext_pane_4, wxID_ANY, wxT("Memory Daily"));
    label_2 = new wxStaticText(m_noteContext_pane_4, wxID_ANY, wxT("HTML Data Process"));
    m_checkHTMLSave = new wxCheckBox(m_noteContext_pane_4, wxID_ANY, wxT("Storage"));
    m_checkHTMLLoad = new wxCheckBox(m_noteContext_pane_4, wxID_ANY, wxT("Loading"));
    label_4 = new wxStaticText(m_noteContext_pane_4, wxID_ANY, wxT("Expanded Dictionary"));
    const wxString m_comboxExpandDict_choices[] = {
        wxT("All Dictionaries")
    };
    m_comboxExpandDict = new wxComboBox(m_noteContext_pane_4, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, 1, m_comboxExpandDict_choices, wxCB_DROPDOWN|wxCB_READONLY);
    m_checkDSMIgnore = new wxCheckBox(m_noteContext_pane_4, CIID_CHECKBOX_DSMIGNORE, wxT("Ignore Dictionary Analysis Error"));
    m_checkDSMClose = new wxCheckBox(m_noteContext_pane_4, CIID_CHECKBOX_DSMCLOSE, wxT("Close Dictionary Analysis Process"));
    m_checkTrace = new wxCheckBox(m_noteContext_pane_4, wxID_ANY, wxT("Open Trace"));
    panel_1 = new wxPanel(m_noteContext_pane_4, wxID_ANY);
    panel_2 = new wxPanel(m_noteContext_pane_4, wxID_ANY);
    m_btnSetApply = new wxButton(m_noteContext_pane_4, CIID_BUTTON_APPLY, wxT("Apply"));
    label_3 = new wxStaticText(m_noteContext_pane_3, wxID_ANY, wxT("Default Tag"));
    m_textDefTag = new wxTextCtrl(m_noteContext_pane_3, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY);
    m_listTagMgnt = new wxListCtrl(m_noteContext_pane_3, CIID_LIST_TAGMGNT, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxLC_SINGLE_SEL|wxLC_NO_SORT_HEADER|wxSUNKEN_BORDER);
    m_btnTagDefault = new wxButton(m_noteContext_pane_3, CIID_BUTTON_TAGSETDEFAULT, wxT("Set Default"));
    panel_3 = new wxPanel(m_noteContext_pane_3, wxID_ANY);
    m_btnTagAdd = new wxButton(m_noteContext_pane_3, CIID_BUTTON_TAGADD, wxT("Add.."));
    panel_4 = new wxPanel(m_noteContext_pane_3, wxID_ANY);
    m_btnTagRemove = new wxButton(m_noteContext_pane_3, CIID_BUTTON_TAGREMOVE, wxT("Delete"));
    m_textTrace = new wxTextCtrl(m_noteContext_pane_6, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_READONLY);
    label_8 = new wxStaticText(m_noteContext_pane_5, wxID_ANY, wxT("LingosHook v1.0.0.a  by Jie."), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE|wxST_NO_AUTORESIZE);
    static_line_4 = new wxStaticLine(m_noteContext_pane_5, wxID_ANY);
    m_btnAboutHelp = new wxButton(m_noteContext_pane_5, CIID_BUTTON_ABOUTHELP, wxT("Welcome to online help.."));
    m_btnAboutSend = new wxButton(m_noteContext_pane_5, CIID_BUTTON_ABOUTSEND, wxT("Send a mail to me. (codejie@gmail.com)"));
    m_btnAboutPost = new wxButton(m_noteContext_pane_5, CIID_BUTTON_ABOUTPORT, wxT("Post a comment to me. (www.cppblog.com/codejie)"));
    panel_9 = new wxPanel(m_noteContext_pane_5, wxID_ANY);
    m_labelInfo = new wxStaticText(this, wxID_ANY, wxT("Ready.."));
    m_btnHook = new wxToggleButton(this, CIID_BUTTON_HOOK, wxT("Hook"));

    SetIcon(wxICON(ICON32));
    
    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(LingosHookFrame, wxFrame)
    // begin wxGlade: LingosHookFrame::event_table
    EVT_TEXT_ENTER(CIID_TEXT_INDEX, LingosHookFrame::OnWordIndexEnter)
    EVT_TEXT(CIID_TEXT_INDEX, LingosHookFrame::OnWordIndexText)
    EVT_LISTBOX_DCLICK(CIID_LIST_INDEX, LingosHookFrame::OnIndexDClick)
    EVT_LISTBOX(CIID_LIST_INDEX, LingosHookFrame::OnIndexSelected)
    EVT_COMMAND(CIID_LIST_INDEX, wxEVT_COMMAND_LH_LISTBOX_DELETE, LingosHookFrame::OnIndexDelete)
    EVT_COMMAND(CIID_LIST_INDEX, wxEVT_COMMAND_LH_LISTBOX_FINDITEM, LingosHookFrame::OnIndexFindItem)
    EVT_COMMAND(CIID_LIST_INDEX, wxEVT_COMMAND_LH_LISTBOX_CONTEXTMENU, LingosHookFrame::OnIndexContextMenu)
    EVT_NOTEBOOK_PAGE_CHANGED(CIID_PAGE_INDEX, LingosHookFrame::OnNoteIndexChanged)
    EVT_CHECKBOX(CIID_CHECKBOX_HOTKEY, LingosHookFrame::OnCheckBoxHotkey)
    EVT_BUTTON(CIID_BUTTON_APPLY, LingosHookFrame::OnBtnSetApply)
    EVT_LIST_ITEM_DESELECTED(CIID_LIST_TAGMGNT, LingosHookFrame::OnListTagMgntDeselect)
    EVT_LIST_ITEM_SELECTED(CIID_LIST_TAGMGNT, LingosHookFrame::OnListTagMgntSelect)
    EVT_BUTTON(CIID_BUTTON_TAGSETDEFAULT, LingosHookFrame::OnBtnTagSetDefault)
    EVT_BUTTON(CIID_BUTTON_TAGADD, LingosHookFrame::OnBtnTagAdd)
    EVT_BUTTON(CIID_BUTTON_TAGREMOVE, LingosHookFrame::OnBtnTagRemove)
    EVT_NOTEBOOK_PAGE_CHANGED(CIID_PAGE_CONTEXT, LingosHookFrame::OnNoteContextChanged)
    EVT_TOGGLEBUTTON(CIID_BUTTON_HOOK, LingosHookFrame::OnBtnHook)
    EVT_BUTTON(XIID_BUTTON_FILTER, LingosHookFrame::OnBtnFilter)
    EVT_TREE_SEL_CHANGED(CIID_TREE_FILTER, LingosHookFrame::OnTreeFilterChange)
    EVT_MENU_RANGE(FMID_BEGIN, FMID_END, LingosHookFrame::OnMenuFilter)
    EVT_BUTTON(CIID_BUTTON_MEMREMOVE, LingosHookFrame::OnBtnMemRemove)
    EVT_BUTTON(CIID_BUTTON_MEMNEXT, LingosHookFrame::OnBtnMemNext)
    EVT_RADIOBUTTON(CIID_RADIO_MEMLEVEL1, LingosHookFrame::OnRadioMemLevel)
    EVT_RADIOBUTTON(CIID_RADIO_MEMLEVEL2, LingosHookFrame::OnRadioMemLevel)
    EVT_RADIOBUTTON(CIID_RADIO_MEMLEVEL3, LingosHookFrame::OnRadioMemLevel)
    EVT_RADIOBUTTON(CIID_RADIO_MEMLEVEL4, LingosHookFrame::OnRadioMemLevel)
    EVT_BUTTON(CIID_BUTTON_MEMREGEN, LingosHookFrame::OnBtnMemRegen)
    EVT_BUTTON(CIID_BUTTON_ABOUTHELP, LingosHookFrame::OnBtnAboutHelp)
    EVT_BUTTON(CIID_BUTTON_ABOUTSEND, LingosHookFrame::OnBtnAboutSend)
    EVT_BUTTON(CIID_BUTTON_ABOUTPORT, LingosHookFrame::OnBtnAboutPost)
	EVT_CHECKBOX(CIID_CHECKBOX_DSMIGNORE, LingosHookFrame::OnCheckDSMIgnore)
    EVT_CHECKBOX(CIID_CHECKBOX_DSMCLOSE, LingosHookFrame::OnCheckDSMClose)	
    EVT_MENU(IMID_SPEAK, LingosHookFrame::OnMenuIndexSpeak)
    EVT_MENU(IMID_COPY, LingosHookFrame::OnMenuIndexCopy)
    EVT_MENU(IMID_DELETE, LingosHookFrame::OnMenuIndexDelete)
    EVT_MENU(IMID_TAGREMOVE, LingosHookFrame::OnMenuIndexTagRemove)
    EVT_MENU_RANGE(IMID_TAGCOPY_START, IMID_TAGCOPY_END, OnMenuIndexTagCopy)
    EVT_COMMAND(CIID_TREE_FILTER, wxEVT_COMMAND_LH_TREECTRL_CONTEXTMENU, LingosHookFrame::OnTreeFilterContextMenu)
    EVT_COMMAND(CIID_TREE_RESULT, wxEVT_COMMAND_LH_TREECTRL_CONTEXTMENU, LingosHookFrame::OnTreeResultContextMenu)
//    EVT_MENU_RANGE(IMID_TAGMOVE_START, IMID_TAGMOVE_END, OnMenuIndexTagMove)

   // end wxGlade
END_EVENT_TABLE();


// wxGlade: add LingosHookFrame event handlers


void LingosHookFrame::set_properties()
{
    // begin wxGlade: LingosHookFrame::set_properties
    SetTitle(wxT("LingosHook"));
    SetSize(wxSize(644, 471));
	SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    m_listIndex->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    m_treeFilter->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    m_treeResult->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    label_8->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    m_textMemWord->SetFont(wxFont(16, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("")));
    m_textMemWord->SetAutoLayout(true);
    m_radioMemLevel0->SetFont(wxFont(9, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));
    m_radioMemLevel1->SetFont(wxFont(9, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));
    m_radioMemLevel2->SetFont(wxFont(9, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));
    m_radioMemLevel3->SetFont(wxFont(9, wxDEFAULT, wxNORMAL, wxNORMAL, 0, wxT("MS Shell Dlg 2")));
    m_noteContext_pane_4->SetScrollRate(10, 10);
    m_btnMemNext->SetDefault();
    m_listTagMgnt->InsertColumn(0, _("Tag"));
    m_listTagMgnt->InsertColumn(1, _("Counter"));
    m_listTagMgnt->InsertColumn(2, _("CreateTime"));
    m_listTagMgnt->InsertColumn(3, _("Description"));

    m_btnTagRemove->Enable(false);
    m_btnTagDefault->Enable(false);

    m_comboxExpandDict->SetSelection(0);

	if(CreateObjects() != 0)
    {
        wxMessageBox(_("Init failed."));
        exit(0);
    }

    ::PostMessage((HWND)this->GetHWND(), WM_OBJECT_INIT, 0, 0);

    // end wxGlade
}


void LingosHookFrame::do_layout()
{
    // begin wxGlade: LingosHookFrame::do_layout
   wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_26 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_12 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_39 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_41 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_40 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_42 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_21 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_24 = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizer_13 = new wxStaticBoxSizer(sizer_13_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_25 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_22 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_11 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_14 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_17 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_18 = new wxStaticBoxSizer(sizer_18_staticbox, wxHORIZONTAL);
    wxStaticBoxSizer* sizer_16 = new wxStaticBoxSizer(sizer_16_staticbox, wxVERTICAL);
    wxStaticBoxSizer* sizer_44 = new wxStaticBoxSizer(sizer_44_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_43 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_38 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_37 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_45 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_19 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_23 = new wxBoxSizer(wxHORIZONTAL);
    wxStaticBoxSizer* sizer_15 = new wxStaticBoxSizer(sizer_15_staticbox, wxHORIZONTAL);
    wxBoxSizer* sizer_10 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_8 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
    wxStaticBoxSizer* sizer_27 = new wxStaticBoxSizer(sizer_27_staticbox, wxVERTICAL);
    wxBoxSizer* sizer_36 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_35 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_29 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_30 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_34 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_33 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_32 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_31 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_28 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_9 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_20 = new wxBoxSizer(wxVERTICAL);
    sizer_20->Add(m_cbWordIndex, 0, wxEXPAND, 0);
    sizer_20->Add(m_listIndex, 1, wxEXPAND, 0);
    sizer_5->Add(sizer_20, 1, wxEXPAND, 0);
    notebook_1_pane_1->SetSizer(sizer_5);
    sizer_9->Add(m_btnFilter, 0, wxEXPAND, 0);
    sizer_9->Add(m_treeFilter, 1, wxEXPAND, 0);
    m_noteIndex_pane_2->SetSizer(sizer_9);
    sizer_28->Add(m_textMemWord, 0, wxALL|wxEXPAND, 16);
    sizer_28->Add(m_textMemScore, 0, wxEXPAND|wxRIGHT, 8);
    sizer_27->Add(sizer_28, 0, wxEXPAND, 0);
    sizer_27->Add(static_line_1, 0, wxALL|wxEXPAND, 4);
    sizer_29->Add(label_5, 0, wxLEFT|wxEXPAND, 8);
    sizer_29->Add(label_6, 0, wxLEFT, 72);
    sizer_31->Add(20, 20, 0, 0, 0);
    sizer_31->Add(m_radioMemLevel0, 1, wxTOP|wxBOTTOM, 4);
    sizer_30->Add(sizer_31, 1, wxEXPAND, 0);
    sizer_32->Add(20, 20, 0, 0, 0);
    sizer_32->Add(m_radioMemLevel1, 0, wxTOP|wxBOTTOM, 4);
    sizer_30->Add(sizer_32, 1, wxEXPAND, 0);
    sizer_33->Add(20, 20, 0, 0, 0);
    sizer_33->Add(m_radioMemLevel2, 0, wxTOP|wxBOTTOM, 4);
    sizer_30->Add(sizer_33, 1, wxEXPAND, 0);
    sizer_34->Add(20, 20, 0, 0, 0);
    sizer_34->Add(m_radioMemLevel3, 0, wxTOP|wxBOTTOM, 4);
    sizer_30->Add(sizer_34, 1, wxEXPAND, 0);
    sizer_29->Add(sizer_30, 0, wxALL|wxEXPAND, 16);
    sizer_27->Add(sizer_29, 0, wxEXPAND, 0);
    sizer_27->Add(static_line_2, 0, wxALL|wxEXPAND, 4);
    sizer_35->Add(m_btnMemRemove, 0, 0, 0);
    sizer_35->Add(panel_5, 1, wxEXPAND, 0);
    sizer_35->Add(m_btnMemNext, 0, 0, 0);
    sizer_27->Add(sizer_35, 0, wxALL|wxEXPAND, 8);
    sizer_27->Add(panel_6, 1, wxEXPAND, 0);
    sizer_27->Add(static_line_3, 0, wxALL|wxEXPAND, 4);
    sizer_36->Add(panel_7, 2, wxEXPAND, 0);
    sizer_36->Add(m_btnMemRegen, 3, 0, 0);
    sizer_36->Add(panel_8, 2, wxEXPAND, 0);
    sizer_27->Add(sizer_36, 0, wxALL|wxEXPAND, 4);
    m_noteIndex_pane_3->SetSizer(sizer_27);
    m_noteIndex->AddPage(notebook_1_pane_1, wxT("Index"));
    m_noteIndex->AddPage(m_noteIndex_pane_2, wxT("Classifications"));
    m_noteIndex->AddPage(m_noteIndex_pane_3, wxT("Memory Daily"));
    sizer_4->Add(m_noteIndex, 1, wxEXPAND, 0);
    window_1_pane_1->SetSizer(sizer_4);
    sizer_8->Add(m_treeResult, 1, wxEXPAND, 0);
    notebook_2_pane_1->SetSizer(sizer_8);
    sizer_10->Add(m_winHTML, 1, wxEXPAND, 0);
    m_noteContext_pane_2->SetSizer(sizer_10);
    sizer_15->Add(m_radioIfLang, 0, 0, 0);
    sizer_14->Add(sizer_15, 0, wxEXPAND, 0);
    sizer_23->Add(m_checkAutoHook, 0, wxEXPAND |wxALIGN_CENTER_VERTICAL, 2);
    sizer_23->Add(48, 8, 0, wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 2);
    sizer_19->Add(m_checkHotkey, 0, wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 2);
    sizer_19->Add(m_listHotkey, 0, wxLEFT|wxTOP|wxBOTTOM|wxRIGHT|wxALIGN_CENTER_VERTICAL, 2);
    sizer_23->Add(sizer_19, 0, wxEXPAND, 0);
    sizer_16->Add(sizer_23, 1, wxEXPAND, 0);
    sizer_45->Add(m_checkAutoSpeak, 0, wxTOP|wxBOTTOM|wxEXPAND|wxALIGN_CENTER_VERTICAL, 2);
    sizer_16->Add(sizer_45, 1, wxEXPAND, 0);
    sizer_37->Add(label_1, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizer_37->Add(m_checkSetTagSync, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_37->Add(m_checkSetMemSync, 0, wxLEFT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizer_16->Add(sizer_37, 1, wxEXPAND, 0);
    sizer_38->Add(label_2, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizer_38->Add(m_checkHTMLSave, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_38->Add(m_checkHTMLLoad, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_16->Add(sizer_38, 1, wxEXPAND, 0);
    sizer_43->Add(label_4, 0, wxRIGHT|wxTOP|wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizer_43->Add(m_comboxExpandDict, 0, wxLEFT|wxTOP|wxBOTTOM, 4);
    sizer_16->Add(sizer_43, 0, wxEXPAND, 0);
    sizer_44->Add(m_checkDSMIgnore, 0, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_44->Add(m_checkDSMClose, 0, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_16->Add(sizer_44, 0, wxEXPAND, 0);
    sizer_14->Add(sizer_16, 0, wxEXPAND, 0);
    sizer_18->Add(m_checkTrace, 0, wxTOP|wxBOTTOM, 4);
    sizer_14->Add(sizer_18, 0, wxEXPAND, 0);
    sizer_14->Add(panel_1, 1, wxEXPAND, 0);
    sizer_17->Add(panel_2, 1, wxEXPAND, 0);
    sizer_17->Add(m_btnSetApply, 0, 0, 0);
    sizer_14->Add(sizer_17, 0, wxEXPAND, 0);
    sizer_11->Add(sizer_14, 1, wxEXPAND, 0);
    m_noteContext_pane_4->SetSizer(sizer_11);
    sizer_22->Add(label_3, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_22->Add(m_textDefTag, 1, wxALL|wxEXPAND, 4);
    sizer_21->Add(sizer_22, 0, wxEXPAND, 0);
    sizer_13->Add(m_listTagMgnt, 1, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_25->Add(m_btnTagDefault, 0, 0, 0);
    sizer_25->Add(panel_3, 1, wxEXPAND, 0);
    sizer_25->Add(m_btnTagAdd, 0, 0, 0);
    sizer_25->Add(panel_4, 1, wxEXPAND, 0);
    sizer_25->Add(m_btnTagRemove, 0, 0, 0);
    sizer_13->Add(sizer_25, 0, wxALL|wxEXPAND, 4);
    sizer_24->Add(sizer_13, 1, wxEXPAND, 0);
    sizer_21->Add(sizer_24, 1, wxEXPAND, 0);
    m_noteContext_pane_3->SetSizer(sizer_21);
    sizer_12->Add(label_8, 0, wxTOP|wxBOTTOM|wxEXPAND, 16);
    sizer_12->Add(static_line_4, 0, wxLEFT|wxRIGHT|wxEXPAND, 4);
    sizer_42->Add(m_btnAboutHelp, 1, wxLEFT|wxRIGHT|wxEXPAND, 8);
    sizer_39->Add(sizer_42, 1, wxALL|wxEXPAND, 8);
    sizer_39->Add(32, 32, 0, 0, 0);
    sizer_40->Add(m_btnAboutSend, 1, wxLEFT|wxRIGHT|wxEXPAND, 8);
    sizer_39->Add(sizer_40, 1, wxALL|wxEXPAND, 8);
    sizer_41->Add(m_btnAboutPost, 1, wxLEFT|wxRIGHT|wxEXPAND, 8);
    sizer_39->Add(sizer_41, 1, wxALL|wxEXPAND, 8);
    sizer_12->Add(sizer_39, 0, wxTOP|wxBOTTOM|wxEXPAND, 16);
    sizer_12->Add(panel_9, 1, wxEXPAND, 0);
	m_noteContext_pane_5->SetSizer(sizer_12);	
    sizer_26->Add(m_textTrace, 1, wxEXPAND, 0);
    m_noteContext_pane_6->SetSizer(sizer_26);
    m_noteContext->AddPage(notebook_2_pane_1, wxT("Result"));
    m_noteContext->AddPage(m_noteContext_pane_2, wxT("HTML"));
    m_noteContext->AddPage(m_noteContext_pane_3, wxT("Tags"));
    m_noteContext->AddPage(m_noteContext_pane_4, wxT("Setting"));
    m_noteContext->AddPage(m_noteContext_pane_5, wxT("About"));	
    m_noteContext->AddPage(m_noteContext_pane_6, wxT("Trace"));
    sizer_7->Add(m_noteContext, 1, wxEXPAND, 0);
    sizer_6->Add(sizer_7, 1, wxEXPAND, 0);
    window_1_pane_2->SetSizer(sizer_6);
    m_splitWindow->SplitVertically(window_1_pane_1, window_1_pane_2, 240);
    sizer_2->Add(m_splitWindow, 1, wxEXPAND, 0);
    sizer_3->Add(m_labelInfo, 1, wxLEFT|wxALIGN_CENTER_VERTICAL, 8);
    sizer_3->Add(m_btnHook, 0, 0, 0);
    sizer_2->Add(sizer_3, 0, wxEXPAND, 0);
    sizer_1->Add(sizer_2, 1, wxEXPAND, 0);
    SetSizer(sizer_1);
    Layout();
    // end wxGlade
}

int LingosHookFrame::CreateObjects()
{
	if(_objDB.Init(_("lingosHook.db3")) != 0)
        return -1;
    
    _dataConfig.reset(new CConfigData(_objDB));
    _objDict.reset(new CDictObject(_objDB, (*_dataConfig)));
    _objTag.reset(new CTagObject(_objDB));
    _objMemoryDaily.reset(new MemoryDaily::CManageObject(_objDB));
	_objHook.reset(new CHookObject(this));
    _objDisplay.reset(new CDisplayObject(this));
    _objSpeak.reset(new CSpeakObject());

    g_objTrigger.AttachConfigData(_dataConfig.get());
    g_objTrigger.AttachDictObject(_objDict.get());
    g_objTrigger.AttachDisplayObject(_objDisplay.get());
    g_objTrigger.AttachTagObject(_objTag.get());
    g_objTrigger.AttachMemoryDailyObject(_objMemoryDaily.get());
    g_objTrigger.AttachSpeakObject(_objSpeak.get());

    return 0;
}

int LingosHookFrame::InitObjects()
{
    if(_dataConfig->Init() != 0)
        return -1;
    if(_dataConfig->Load() != 0)
        return -1;

    if(_objDict->Init() != 0)
        return -1;

    if(_objTag->Init() != 0)
        return -1;

    if(_objMemoryDaily->Init() != 0)
        return -1;

    if(_objHook->Init(*_dataConfig) != 0)
        return -1;

    if(_objSpeak->Init() != 0)
        return -1;

	return 0;
}

int LingosHookFrame::LoadObjects()
{
    UpdateConfigData(false);
    
    _objTag->Load();

    _objDict->GetAllWords();

    if(_dataConfig->m_iDataSyncTag == 1)
    {
        g_objTrigger.OnSortShow(CLHFilterTreeCtrl::FilterType(FMID_TAG - FMID_BEGIN));
    }
    else
    {
        g_objTrigger.OnSortShow(CLHFilterTreeCtrl::FilterType(FMID_CLOSE - FMID_BEGIN));        
    }

    ShowHint(_("Ready.."));
    return 0;
}


int LingosHookFrame::UpdateConfigData(bool retrieve)
{
    if(retrieve)
    {
        _dataConfig->m_iIfLanguage = m_radioIfLang->GetSelection();
        _dataConfig->m_iOpenHotkey = m_checkHotkey->IsChecked() ? 1 : 0;
        _dataConfig->m_iHotkey = m_listHotkey->GetSelection();
        _dataConfig->m_iOpenTrace = m_checkTrace->IsChecked() ? 1 : 0;
        _dataConfig->m_iAutoHook = m_checkAutoHook->IsChecked() ? 1 : 0;
        _dataConfig->m_iDataSyncTag = m_checkSetTagSync->IsChecked() ? 1 : 0;
        _dataConfig->m_iDataSyncMem = m_checkSetMemSync->IsChecked() ? 1 : 0;
        _dataConfig->m_iHTMLSave = m_checkHTMLSave->IsChecked() ? 1 : 0;
        _dataConfig->m_iHTMLLoad = m_checkHTMLLoad->IsChecked() ? 1 : 0;

        if(m_checkDSMIgnore->IsChecked())
        {
            _dataConfig->m_iIgnoreDict = 1;
        }
        else if(m_checkDSMClose->IsChecked())
        {
            _dataConfig->m_iIgnoreDict = 2;
        }
        else
        {
            _dataConfig->m_iIgnoreDict = 0;
        }

        int sel = m_comboxExpandDict->GetSelection();
        if(sel == 0)
        {
            _dataConfig->m_iExpandDict = -1;
        }
        else
        {
            CLHComboBoxClientData* data = (CLHComboBoxClientData*)m_comboxExpandDict->GetClientObject(sel);
            _dataConfig->m_iExpandDict = data->Index();
        }

        _dataConfig->m_iAutoSpeak = m_checkAutoSpeak->IsChecked() ? 1 : 0;

        if(_dataConfig->Save() == 0)
        {
            wxMessageBox(_("Some configuration data will be not valid until application restart."));
        }
        else
        {
            wxMessageBox(_("Retrieve config data failed."));
            return -1;
        }
    }
    else
    {
        m_radioIfLang->SetSelection(_dataConfig->m_iIfLanguage);
        m_checkAutoHook->SetValue(_dataConfig->m_iAutoHook == 1);

        if(_dataConfig->m_iOpenHotkey == 1)
        {
            m_checkHotkey->SetValue(true);
            m_listHotkey->Enable();
            m_listHotkey->SetSelection(_dataConfig->m_iHotkey);
        }
        else
        {
            m_checkHotkey->SetValue(false);
            m_listHotkey->Enable(false);
            m_listHotkey->SetSelection(_dataConfig->m_iHotkey);
        }

        m_checkSetTagSync->SetValue(_dataConfig->m_iDataSyncTag == 1 ? true : false);
        m_checkSetMemSync->SetValue(_dataConfig->m_iDataSyncMem == 1 ? true : false);
        m_checkHTMLSave->SetValue(_dataConfig->m_iHTMLSave == 1 ? true : false);
        m_checkHTMLLoad->SetValue(_dataConfig->m_iHTMLLoad == 1 ? true : false);

        m_checkTrace->SetValue(_dataConfig->m_iOpenTrace == 1 ? true : false);

        if(_dataConfig->m_iExpandDict == -1)
        {
            m_comboxExpandDict->SetSelection(0);
        }
        else
        {
            CLHComboBoxClientData* data = NULL;
            for(unsigned int i = 0; i < m_comboxExpandDict->GetCount(); ++ i)
            {
                data = (CLHComboBoxClientData*)m_comboxExpandDict->GetClientObject(i);
                if(data != NULL && data->Index() == _dataConfig->m_iExpandDict)
                {
                    m_comboxExpandDict->SetSelection(i);
                    break;
                }
            }
        }
    
        m_checkDSMIgnore->SetValue(_dataConfig->m_iIgnoreDict == 1);
        m_checkDSMClose->SetValue(_dataConfig->m_iIgnoreDict == 2);
        m_checkAutoSpeak->SetValue(_dataConfig->m_iAutoSpeak == 1);
    }
    return 0;
}

int LingosHookFrame::MakeContextMenu(const wxString& title, int orig, const wxPoint& pos)
{
    wxMenu menu(title);
    menu.Append(IMID_SPEAK, _("Speak.."));
//    menu.Enable(IMID_SPEAK, false);
    menu.AppendSeparator();
    menu.Append(wxID_ANY, _("Copy to tag"), MakeTagSubMenu(IMID_TAGCOPY_START));
    if(orig == 2)
    {//pop on Tag panel
        menu.Append(IMID_TAGREMOVE, _("Remove from this tag"));
    }
    
//    menu.Append(wxID_ANY, _("Move to tag"), MakeTagSubMenu(IMID_TAGMOVE_START));
    menu.AppendSeparator();
    menu.Append(IMID_COPY, _("Copy"));
    menu.AppendSeparator();
    menu.Append(IMID_DELETE, _("Delete"));

    PopupMenu(&menu, pos.x, pos.y);

    return 0;
}

wxMenu* LingosHookFrame::MakeTagSubMenu(int baseid)
{
    wxMenu* menu = new wxMenu();
    long item = -1;
    while(1)
    {
        item = m_listTagMgnt->GetNextItem(item);
        if(item == -1)
            break;
        menu->Append(baseid + item, m_listTagMgnt->GetItemText(item));
    };
    return menu;
}

void LingosHookFrame::HookTextProc(const wxString &text)
{
//	_objDict->TextProc(text);

	if(_dataConfig->m_iOpenTrace == 1)
		m_textTrace->AppendText(_("\n----- TEXT -----\n") + text);
}

void LingosHookFrame::HookHTMLProc(const wxString &html)
{
    _objDict->HTMLProc(html, _dataConfig->m_iIgnoreDict);

	if(_dataConfig->m_iOpenTrace == 1)
    {
        if(_objDisplay.get() != NULL)
            _objDisplay->TraceHTML(html);
    }
}

void LingosHookFrame::HookCDProc(const wxString& str)
{
    _objDict->CacheWord(str.Lower());
}

void LingosHookFrame::SetHookButton(bool checked)
{
    if(checked)
    {
        ShowHint(_("Set unhook..."));
        m_btnHook->SetValue(true);
        m_btnHook->SetLabel(_("Unhook"));
        ShowHint(_("Ready..."));
    }
    else
    {
        ShowHint(_("Set hook..."));
        m_btnHook->SetValue(false);
        m_btnHook->SetLabel(_("Hook"));
        ShowHint(_("Ready..."));
    }
}

void LingosHookFrame::ShowHint(const wxString& hint)
{
    m_labelInfo->SetLabel(hint);
}

int LingosHookFrame::CopyWord(const wxString& word)
{
    if(wxTheClipboard->Open())
    {
        wxTheClipboard->SetData(new wxTextDataObject(word));
        wxTheClipboard->Close();
    }
    return 0;
}

int LingosHookFrame::SpeakWord(const wxString& word)
{
    _objSpeak->Speak(word);
    return 0;
}

int LingosHookFrame::RemoveWord(const wxString& word)
{
    int wordid = -1;
    if(_objDict->GetWordID(word, wordid) != 0)
        return -1;
    return RemoveWord(wordid);
}

int LingosHookFrame::RemoveWord(int wordid)
{
    return _objDict->RemoveWord(wordid);
}

int LingosHookFrame::CopyToTag(const wxString &word, int tagpos)
{
    int wordid = -1;
    if(_objDict->GetWordID(word, wordid) != 0)
        return -1;
    int tagid = m_listTagMgnt->GetItemData(tagpos);
    if(tagid == -1)
        return -1;
    if(_objTag->IsIndexExist(wordid, tagid) != 0)
        return _objTag->InsertIndex(wordid, tagid);
    return 0;
}

int LingosHookFrame::RemoveFromTag(int wordid, int tagid)
{
    if(_objTag->IsOnlySysDefTag(wordid) != 0)
        return _objTag->RemoveIndex(wordid, tagid);
    return 0;
}

/////////////////////////////////////////////////

WXLRESULT LingosHookFrame::MSWWindowProc(WXUINT message, WXWPARAM wParam, WXLPARAM lParam)
{
    if(message == WM_OBJECT_INIT)
    {
        InitObjects();
        LoadObjects();
    }
    else
    {
	    if(_objHook.get() != NULL)
		    _objHook->MessageProc(message, wParam, lParam);
        
        //if(message == WM_HOTKEY && _objHook.get() != NULL)
        //    _objHook->MessageProc(message, wParam, lParam);
    }

	return wxFrame::MSWWindowProc(message, wParam, lParam);
}

void LingosHookFrame::OnWordIndexEnter(wxCommandEvent &event)
{
    wxString str = event.GetString();
    if(!str.empty())
    {
        if(m_cbWordIndex->FindString(str) == -1)
        {
            m_cbWordIndex->Append(str);
        }
    }
}


void LingosHookFrame::OnWordIndexText(wxCommandEvent &event)
{
    m_listIndex->FindItem(event.GetString());
//    event.Skip();
//    wxLogDebug(wxT("Event handler (LingosHookFrame::OnWordIndexText) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void LingosHookFrame::OnIndexDClick(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (LingosHookFrame::OnIndexDClick) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void LingosHookFrame::OnIndexSelected(wxCommandEvent &event)
{
    int pos = m_noteIndex->GetSelection();
    if(pos == NID_INDEX)
    {
        if(event.IsSelection())
        {
            m_listIndex->SetSelection(event.GetSelection());
            _objDict->GetResult((int)event.GetClientData());
        }
    }
}

void LingosHookFrame::OnIndexDelete(wxCommandEvent& event)
{
    if(event.IsSelection())
    {
        int sel = event.GetInt();
        RemoveWord((int)event.GetClientData());
    }
}

void LingosHookFrame::OnIndexFindItem(wxCommandEvent& event)
{
//    m_listIndex->SetSelection(event.GetInt());
}

void LingosHookFrame::OnIndexContextMenu(wxCommandEvent& event)
{
    wxPoint pos = ::wxGetMousePosition();
    pos = ScreenToClient(pos);

    MakeContextMenu(event.GetString(), 0, pos);
//    m_listIndex->SetSelection(event.GetInt());
}

void LingosHookFrame::OnNoteIndexChanged(wxNotebookEvent &event)
{
    int oldpos = event.GetOldSelection();
    if(oldpos == NID_FILTER)
    {//tag
        if(_dataConfig->m_iDataSyncTag != 1)
            g_objTrigger.OnSortShow(CLHFilterTreeCtrl::FilterType(FMID_CLOSE - FMID_BEGIN));        
    }

    int pos = event.GetSelection();
    if(pos == NID_MEMORY)
    {//Memory Daily
        if(_dataConfig->m_iDataSyncMem != 1 || _objMemoryDaily->IsBuilt() == false)
        {
            if(_objMemoryDaily->Load() != 0)
            {
                wxMessageBox(_("MemoryDaily Object load data failed."));
            }
        }
    }
}

void LingosHookFrame::OnNoteContextChanged(wxNotebookEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (LingosHookFrame::OnNoteContextChanged) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}

void LingosHookFrame::OnBtnHook(wxCommandEvent &event)
{
    bool check = event.IsChecked();

    m_btnHook->SetValue(!check);

    if(check)
    {
        _objHook->SetHook();
    }
    else
    {
        _objHook->SetUnhook();
    }
}

void LingosHookFrame::OnCheckBoxHotkey(wxCommandEvent &event)
{
    m_listHotkey->Enable(event.IsChecked());
}

void LingosHookFrame::OnBtnSetApply(wxCommandEvent &event)
{
    if(UpdateConfigData(true) != 0)
    {
        UpdateConfigData(false);
    }
}

void LingosHookFrame::OnListTagMgntDeselect(wxListEvent &event)
{
    m_btnTagRemove->Enable(false);
    m_btnTagDefault->Enable(false);
    //event.Skip();
    //wxLogDebug(wxT("Event handler (LingosHookFrame::OnListTagMgntDeselect) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void LingosHookFrame::OnListTagMgntSelect(wxListEvent &event)
{
    if((int)event.GetData() != _objTag->SysDefTag())
    {
        m_btnTagRemove->Enable(true);
    }
    m_btnTagDefault->Enable(true);
}

void LingosHookFrame::OnBtnTagSetDefault(wxCommandEvent &event)
{
    long item = m_listTagMgnt->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    if(item != -1)
    {
        _objTag->UpdateDefaultTag(m_listTagMgnt->GetItemData(item));
    }
}

void LingosHookFrame::OnBtnTagAdd(wxCommandEvent &event)
{
    TagInputDialog dlg(this);
    if(dlg.ShowModal() == wxID_OK)
    {
        _objTag->InsertTag(dlg.Title(), dlg.Description());
    }
}

void LingosHookFrame::OnBtnTagRemove(wxCommandEvent &event)
{
    long item = m_listTagMgnt->GetNextItem(-1, wxLIST_NEXT_ALL, wxLIST_STATE_SELECTED);
    if(item != -1)
    {
        wxString str = _objTag->GetTitle(m_listTagMgnt->GetItemData(item));
        str = _("Are you sure that remove '") + str + _("' tag ?");
        if(wxMessageBox(str, _("LingosHookApp"), wxCENTRE | wxYES_NO | wxICON_QUESTION) == wxYES)
            _objTag->RemoveTag(m_listTagMgnt->GetItemData(item));
    }
}

void LingosHookFrame::OnBtnFilter(wxCommandEvent &event)
{
    wxPoint pos = m_btnFilter->GetPosition();
    pos.x += 8;
    pos.y = m_btnFilter->GetSize().y + 8;
    
    wxMenu menu;
    menu.Append(FMID_TAG, _("Classification by Tag"));
    menu.Append(FMID_DATE, _("Classification by Date"));
    menu.Enable(FMID_DATE, false);
    menu.Append(FMID_COUNTER, _("Classification by Score"));
    menu.Enable(FMID_COUNTER, false);
    menu.AppendSeparator();
    menu.Append(FMID_CLOSE, _("Close"));

    PopupMenu(&menu, pos.x, pos.y);

//    event.Skip();
//    wxLogDebug(wxT("Event handler (LingosHookFrame::OnBtnFilter) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}

void LingosHookFrame::OnTreeFilterChange(wxTreeEvent &event)
{
    wxTreeItemId item = event.GetItem();
    CLHFilterTreeItemData* data = (CLHFilterTreeItemData*)m_treeFilter->GetItemData(item);
    if(data != NULL && data->Type() == CLHFilterTreeItemData::IT_WORD)
    {
        _objDict->GetResult(data->ID());
    }
    else
    {
        m_treeResult->DeleteAllItems();
        m_winHTML->SetPage(_("<HTML></HTML>"));
    }
}

void LingosHookFrame::OnMenuFilter(wxCommandEvent& event)
{
    g_objTrigger.OnSortShow(CLHFilterTreeCtrl::FilterType(event.GetId() - FMID_BEGIN));
}

void LingosHookFrame::OnBtnMemRemove(wxCommandEvent &event)
{
    int wordid = _objMemoryDaily->GetWordID();
    RemoveWord(wordid);

    //g_objTrigger.OnWordRemove(_objMemoryDaily->GetWord());
    //g_objTrigger.OnWordRemove(wordid);

    //if(_objDict->RemoveWord(wordid) == 0)
    //{  
    //    if(_dataConfig->m_iDataSyncMem != 1)
    //        _objMemoryDaily->WordRemove(wordid);
    //}
}

void LingosHookFrame::OnBtnMemNext(wxCommandEvent &event)
{
    int offset = 0;
    if(m_radioMemLevel0->GetValue() == true)
    {
        offset = MemoryDaily::LO_LEVEL_1;
    }
    else if(m_radioMemLevel1->GetValue() == true)
    {
        offset = MemoryDaily::LO_LEVEL_2;
    }
    else if(m_radioMemLevel2->GetValue() == true)
    {
        offset = MemoryDaily::LO_LEVEL_3;
    }
    else if(m_radioMemLevel3->GetValue() == true)
    {
        offset = MemoryDaily::LO_LEVEL_4;
    }
    else
    {
        return;
    }
    _objMemoryDaily->NextWord(offset);
//    event.Skip();
//    wxLogDebug(wxT("Event handler (LingosHookFrame::OnBtnMemNext) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}

void LingosHookFrame::OnRadioMemLevel(wxCommandEvent &event)
{
    if(_objDict->GetResult(_objMemoryDaily->GetWordID()) == 0)
    {
        m_btnMemRemove->Enable(true);
        m_btnMemNext->Enable(true);
    }
}

void LingosHookFrame::OnBtnMemRegen(wxCommandEvent &event)
{
    if(_objMemoryDaily->Load() != 0)
    {
        wxMessageBox(_("MemoryDaily Object load data failed."));
    }
}

void LingosHookFrame::OnBtnAboutHelp(wxCommandEvent &event)
{
    wxString cmd = _("http://www.cppblog.com/codejie");
    ::wxLaunchDefaultBrowser(cmd);}


void LingosHookFrame::OnBtnAboutSend(wxCommandEvent &event)
{
    wxString cmd = _("mailto:codejie@gmail.com");
    ::wxLaunchDefaultBrowser(cmd);}


void LingosHookFrame::OnBtnAboutPost(wxCommandEvent &event)
{
    wxString cmd = _("http://www.cppblog.com/codejie");
    ::wxLaunchDefaultBrowser(cmd);
}

void LingosHookFrame::OnMenuIndexSpeak(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    SpeakWord(menu->GetTitle());
}

void LingosHookFrame::OnMenuIndexCopy(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    CopyWord(menu->GetTitle());
}

void LingosHookFrame::OnMenuIndexDelete(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    RemoveWord(menu->GetTitle());
}

void LingosHookFrame::OnMenuIndexTagCopy(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    int tagpos = event.GetId() - IMID_TAGCOPY_START;
    CopyToTag(menu->GetTitle(), tagpos);
}

void LingosHookFrame::OnMenuIndexTagRemove(wxCommandEvent& event)
{
    wxMenu* menu = (wxMenu*)event.GetEventObject();
    wxTreeItemId item = m_treeFilter->GetSelection();

    if(item.IsOk())
    {
        if(m_treeFilter->GetItemText(item) == menu->GetTitle())
        {
            CLHFilterTreeItemData* idata = (CLHFilterTreeItemData*)m_treeFilter->GetItemData(item);
//            if(idata != NULL && idata->Type() == CLHFilterTreeItemData::IT_WORD)
            RemoveFromTag(idata->ID(), idata->PID());
        }
    }
}

void LingosHookFrame::OnTreeFilterContextMenu(wxCommandEvent& event)
{
    wxPoint pos = ::wxGetMousePosition();
    pos = ScreenToClient(pos);

    MakeContextMenu(event.GetString(), 2, pos);
}

void LingosHookFrame::OnTreeResultContextMenu(wxCommandEvent& event)
{
    wxPoint pos = ::wxGetMousePosition();
    pos = ScreenToClient(pos);

    MakeContextMenu(event.GetString(), 0, pos);
}

void LingosHookFrame::OnCheckDSMIgnore(wxCommandEvent &event)
{
    if(event.IsChecked())
    {
        m_checkDSMClose->SetValue(false);
        m_checkHTMLSave->SetValue(true);
        m_checkHTMLLoad->SetValue(true);
    }
}

void LingosHookFrame::OnCheckDSMClose(wxCommandEvent &event)
{
    if(event.IsChecked())
    {
        m_checkDSMIgnore->SetValue(false);
        m_checkHTMLSave->SetValue(true);
        m_checkHTMLLoad->SetValue(true);
    }
}
