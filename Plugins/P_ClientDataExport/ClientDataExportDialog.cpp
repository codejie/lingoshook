// -*- C++ -*- generated by wxGlade 0.6.3 on Thu Dec 08 14:28:26 2011



#include "TinyHtmlParser.h"

#include "ClientDataExportDialog.h"

// begin wxGlade: ::extracode
// end wxGlade

const wxString ClientDataExportDialog::TITLE    =   wxT("Client Data Export");

ClientDataExportDialog::ClientDataExportDialog(CDBAccess* dbaccess, wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxMINIMIZE_BOX)
, _objDBAccess(dbaccess)
{
    // begin wxGlade: ClientDataExportDialog::ClientDataExportDialog
    label_1 = new wxStaticText(this, wxID_ANY, wxT("Options"));
    static_line_1 = new wxStaticLine(this, wxID_ANY);
    radioAll = new wxRadioButton(this, 1000, wxT("All Words"));
    radioDate = new wxRadioButton(this, 1001, wxT("By Date"));
    checkLess = new wxCheckBox(this, 1002, wxT("Less than"));
    dateLess = new wxDatePickerCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN);
    checkGreater = new wxCheckBox(this, 1004, wxT("Greater than"));
    dateGreater = new wxDatePickerCtrl(this, wxID_ANY, wxDefaultDateTime, wxDefaultPosition, wxDefaultSize, wxDP_DROPDOWN);
    radioTag = new wxRadioButton(this, 1005, wxT("By Tag"));
    label_4 = new wxStaticText(this, wxID_ANY, wxT("Title"));
    const wxString *listTag_choices = NULL;
    listTag = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, 0, listTag_choices, wxCB_DROPDOWN|wxCB_DROPDOWN|wxCB_READONLY|wxCB_SORT);
    label_1_copy = new wxStaticText(this, wxID_ANY, wxT("Export"));
    static_line_1_copy = new wxStaticLine(this, wxID_ANY);
    label_5 = new wxStaticText(this, wxID_ANY, wxT("Output File"));
    editOutput = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    btnBrowse = new wxButton(this, 1006, wxT("&Browse.."));
    static_line_2 = new wxStaticLine(this, wxID_ANY);
    btnExport = new wxButton(this, 1008, wxT("&Export"));
    panel_1 = new wxPanel(this, wxID_ANY);
    btnClose = new wxButton(this, wxID_CLOSE, wxEmptyString);

    set_properties();
    do_layout();

    LoadTags();
    // end wxGlade
}


BEGIN_EVENT_TABLE(ClientDataExportDialog, wxDialog)
    // begin wxGlade: ClientDataExportDialog::event_table
    EVT_RADIOBUTTON(1000, ClientDataExportDialog::OnRadioAllClick)
    EVT_RADIOBUTTON(1001, ClientDataExportDialog::OnRadioDateClick)
    EVT_CHECKBOX(1002, ClientDataExportDialog::OnCheckLessClick)
    EVT_CHECKBOX(1004, ClientDataExportDialog::OnCheckGreaterClick)
    EVT_RADIOBUTTON(1005, ClientDataExportDialog::OnRadioTagClick)
    EVT_BUTTON(1006, ClientDataExportDialog::OnBtnBrowseClick)
    EVT_BUTTON(1008, ClientDataExportDialog::OnBtnExportClick)
    EVT_BUTTON(wxID_CLOSE, ClientDataExportDialog::OnBtnCloseClick)
    // end wxGlade
END_EVENT_TABLE();


void ClientDataExportDialog::OnRadioAllClick(wxCommandEvent &event)
{
    checkLess->Enable(false);
    checkGreater->Enable(false);
    dateLess->Enable(false);
    dateGreater->Enable(false);

    label_4->Enable(false);
    listTag->Enable(false);

}


void ClientDataExportDialog::OnRadioDateClick(wxCommandEvent &event)
{
    checkLess->Enable(true);
    checkGreater->Enable(true);
    dateLess->Enable(true);
    dateGreater->Enable(true);

    label_4->Enable(false);
    listTag->Enable(false);
}


void ClientDataExportDialog::OnCheckLessClick(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (ClientDataExportDialog::OnCheckLessClick) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void ClientDataExportDialog::OnCheckGreaterClick(wxCommandEvent &event)
{
    event.Skip();
    wxLogDebug(wxT("Event handler (ClientDataExportDialog::OnCheckGreaterClick) not implemented yet")); //notify the user that he hasn't implemented the event handler yet
}


void ClientDataExportDialog::OnRadioTagClick(wxCommandEvent &event)
{
    checkLess->Enable(false);
    checkGreater->Enable(false);
    dateLess->Enable(false);
    dateGreater->Enable(false);

    label_4->Enable(true);
    listTag->Enable(true);
}


void ClientDataExportDialog::OnBtnBrowseClick(wxCommandEvent &event)
{
    wxFileDialog dlg(this, wxT("Select output file"), wxEmptyString, wxT("LingosHook_clientdata.db3"), wxT("SQLite3 Files(*.db3)|*.db3|All Files(*.*)|*.*"));
    if(dlg.ShowModal() == wxID_OK)
    {
        editOutput->SetValue(dlg.GetPath());
    }
}


void ClientDataExportDialog::OnBtnCloseClick(wxCommandEvent &event)
{
    Close();
}

void ClientDataExportDialog::OnBtnExportClick(wxCommandEvent &event)
{
    btnClose->Enable(false);

    if(Export() == 0)
    {
        wxMessageBox(wxT("Export Complete."), TITLE, wxCENTRE | wxOK | wxICON_INFORMATION);
    }
    else
    {
        wxMessageBox(wxT("Export FAIL."), TITLE, wxCENTRE | wxOK | wxICON_ERROR);
    }

    btnClose->Enable(true);
}

// wxGlade: add ClientDataExportDialog event handlers


void ClientDataExportDialog::set_properties()
{
    // begin wxGlade: ClientDataExportDialog::set_properties
    SetTitle(wxT("Client Data Export"));
    SetSize(wxSize(286, 320));
    label_1->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    checkLess->Enable(false);
    dateLess->Enable(false);
    checkGreater->Enable(false);
    dateGreater->Enable(false);
    label_4->Enable(false);
    listTag->Enable(false);
    label_1_copy->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    // end wxGlade
}


void ClientDataExportDialog::do_layout()
{
    // begin wxGlade: ClientDataExportDialog::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_10 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_9 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_2_copy = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_8 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    sizer_2->Add(label_1, 0, wxEXPAND, 0);
    sizer_2->Add(static_line_1, 1, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_1->Add(sizer_2, 0, wxALL|wxEXPAND, 8);
    sizer_3->Add(radioAll, 0, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_1->Add(sizer_3, 0, wxLEFT|wxEXPAND, 24);
    sizer_4->Add(radioDate, 0, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_5->Add(checkLess, 1, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_5->Add(dateLess, 1, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_4->Add(sizer_5, 0, wxLEFT|wxEXPAND, 24);
    sizer_6->Add(checkGreater, 1, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_6->Add(dateGreater, 1, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_4->Add(sizer_6, 0, wxLEFT|wxEXPAND, 24);
    sizer_1->Add(sizer_4, 0, wxLEFT|wxEXPAND, 24);
    sizer_7->Add(radioTag, 0, wxTOP|wxBOTTOM|wxEXPAND, 4);
    sizer_8->Add(label_4, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_8->Add(listTag, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_7->Add(sizer_8, 1, wxLEFT|wxEXPAND, 24);
    sizer_1->Add(sizer_7, 0, wxLEFT|wxEXPAND, 24);
    sizer_2_copy->Add(label_1_copy, 0, wxEXPAND, 0);
    sizer_2_copy->Add(static_line_1_copy, 1, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_1->Add(sizer_2_copy, 0, wxALL|wxEXPAND, 8);
    sizer_9->Add(label_5, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_9->Add(editOutput, 1, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 4);
    sizer_9->Add(btnBrowse, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_1->Add(sizer_9, 0, wxLEFT|wxEXPAND, 24);
    sizer_1->Add(static_line_2, 0, wxALL|wxEXPAND, 4);
    sizer_10->Add(btnExport, 0, wxALL, 4);
    sizer_10->Add(panel_1, 1, wxEXPAND, 0);
    sizer_10->Add(btnClose, 0, wxALL, 4);
    sizer_1->Add(sizer_10, 0, wxEXPAND, 0);
    SetSizer(sizer_1);
    Layout();
    // end wxGlade
}

int ClientDataExportDialog::Export()
{
    wxString sql;
    if(MakeSQL(sql) != 0)
        return -1;

    wxString file = editOutput->GetValue();
    if(file.IsEmpty())
        return -1;

    wxString::size_type pos = file.find_last_of(wxT("."));
    if(pos == wxString::npos)
    {
        file = file + wxT(".db3");
    }

    CDBAccess::TDatabase db;
    if(OpenDB(file, db) != 0)
        return -1;

    if(TransDB(db, sql) != 0)
        return -1;

    CloseDB(db);

    return 0;
}

int ClientDataExportDialog::MakeSQL(wxString &sql)
{
//select WordTable.SrcID, WordTable.Word, SrcDataTable.HTML, SrcDataTable.CheckinTime from WordTable, SrcDataTable where WordTable.SrcID = SrcDataTable.SrcID
// and SrcDataTable.CheckinTime > '2011-08-17 12:14:52'
    sql = wxT("select WordTable.SrcID, WordTable.Word, SrcDataTable.HTML from WordTable, SrcDataTable where WordTable.SrcID = SrcDataTable.SrcID");
    if(radioAll->GetValue())
    {
    }
    else if(radioDate->GetValue())
    {
        wxString cond = wxEmptyString;
        if(checkLess->IsChecked())
        {
            wxString less = dateLess->GetValue().FormatISODate();
            cond = wxT(" and SrcDataTable.CheckinTime <'") + less + wxT("'");
        }
        else if(checkGreater->IsChecked())
        {
            wxString gtr = dateGreater->GetValue().FormatISODate();
            cond = wxT(" and SrcDataTable.CheckinTime >'") + gtr + wxT("'");

        }
        else if(checkLess->IsChecked() && checkGreater->IsChecked())
        {
            wxString less = dateLess->GetValue().FormatISODate();
            wxString gtr = dateGreater->GetValue().FormatISODate();
            cond = wxT(" and (SrcDataTable.CheckinTime >'") + less + wxT("' and SrcDataTable.CheckinTime <'") + gtr + wxT("')");
        }
        sql += cond;
    }
    else if(radioTag->GetValue())
    {
        sql = wxT("select WordTable.SrcID, WordTable.Word, SrcDataTable.HTML from WordTable, SrcDataTable, TagTable, TagIndexTable where WordTable.SrcID = SrcDataTable.SrcID and WordTable.WordID = TagIndexTable.WordID and TagTable.TagID = TagIndexTable.TagID and TagTable.Title='") + listTag->GetValue() + wxT("'");
        //sql += cond;
    }
    else
    {
        return -1;
    }
    sql += wxT(" order by WordTable.SrcID");
    //sql += wxT(" group by WordTable.WordID");
    return 0;
}

void ClientDataExportDialog::RemoveTable(CDBAccess::TDatabase& db, const wxString& name)
{
    if(db.TableExists(name))
    {
        wxString sql = wxT("DROP TABLE ") + name;
        db.ExecuteUpdate(sql);
    }
}

int ClientDataExportDialog::OpenDB(const wxString &file, CDBAccess::TDatabase &db)
{
    try
    {
        if(db.IsOpen())
            db.Close();
        db.Open(file, wxEmptyString);
        
        RemoveTable(db, wxT("info"));
        const char* sql = "CREATE TABLE info (item INTEGER PRIMARY KEY AUTOINCREMENT, value VARCHAR(32))";
        db.ExecuteUpdate(sql);

        RemoveTable(db, wxT("word"));
        sql = "CREATE TABLE word (srcid INTEGER, word VARCHAR(32))";
        db.ExecuteUpdate(sql);

        RemoveTable(db, wxT("src"));
        sql = "CREATE TABLE src (srcid INTEGER PRIMARY KEY AUTOINCREMENT, html TEXT)";
        db.ExecuteUpdate(sql);
    }
    catch(const CDBAccess::TException& e)
    {
        return -1;
    }
    return 0;
}

void ClientDataExportDialog::CloseDB(CDBAccess::TDatabase &db)
{
    db.Close();
}

int ClientDataExportDialog::TransDB(CDBAccess::TDatabase &db, const wxString &sql)
{
    if(_objDBAccess == NULL)
        return -1;

    try
    {
        CDBAccess::TDatabase& src = _objDBAccess->Database();
        CDBAccess::TResult res = src.ExecuteQuery(sql);// query.ExecuteQuery();
        if(!res.IsOk())
            return -1;

        CDBAccess::TQuery qsrc = db.PrepareStatement("INSERT INTO src (html) VALUES (?)");
        CDBAccess::TQuery qword = db.PrepareStatement("INSERT INTO word (srcid, word) VALUES (?, ?)");

        int count = 0;
        int p = -1, n = -1;
        int srcid = 0;

        while(res.NextRow())
        {
            n = res.GetInt(0);
            if(p != n)
            {
                qsrc.ClearBindings();

                wxString ret;
                OptimizeHTML(res.GetString(2), ret);

                qsrc.Bind(1, ret/*res.GetString(2)*/);
                qsrc.ExecuteUpdate();

                p = n;
                srcid = db.GetLastRowId().ToLong();
            }

            qword.ClearBindings();
            qword.Bind(1, srcid);
            qword.Bind(2, res.GetString(1));
            qword.ExecuteUpdate();
        }

        CDBAccess::TQuery qinfo = db.PrepareStatement("INSERT INTO info (item, value) VALUES (?, ?)");
        qinfo.Bind(1, 1);
        qinfo.Bind(2, 1);//version
        qinfo.ExecuteUpdate();

        qinfo.ClearBindings();
        qinfo.Bind(1, 2);
        qinfo.Bind(2, wxT("cde"));
        qinfo.ExecuteQuery();
    }
    catch(CDBAccess::TException& e)
    {
        return -1;
    }

    return 0;
}

void ClientDataExportDialog::LoadTags()
{
    listTag->Clear();

    CDBAccess::TDatabase& src = _objDBAccess->Database();
    CDBAccess::TResult res = src.ExecuteQuery("SELECT Title FROM TagTable");// query.ExecuteQuery();
    if(res.IsOk())
    {
        while(res.NextRow())
        {
            listTag->AppendString(res.GetString(0));
        }
    }

    listTag->Select(0);
}

int ClientDataExportDialog::OptimizeHTML(const wxString& src, wxString& ret)
{
    std::wstring html(src.begin(), src.end());

    TinyHtmlParser::CDocumentObject doc;    

    try
    {
        if(doc.Load(html, true) != 0)
        {
            return -1;
        }
    }
    catch(TinyHtmlParser::CExceptionObject& e)
    {
        return -1;
    }    



//h->insert(12, wxT("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>"));

    return wxEmptyString;
}

