// -*- C++ -*- generated by wxGlade 0.6.3 on Wed Jan 26 17:25:45 2011

#include "wx/wfstream.h"
#include "wx/txtstrm.h"

#include "DBAccess.h"

#include "WordExportDialog.h"

// begin wxGlade: ::extracode
// end wxGlade



WordExportDialog::WordExportDialog(CDBAccess* dbaccess, wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
: wxDialog(parent, id, title, pos, size, wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxTHICK_FRAME)
, _objDBAccess(dbaccess)
{
    // begin wxGlade: WordExportDialog::WordExportDialog
    label_1 = new wxStaticText(this, wxID_ANY, wxT("Range"));
    m_rdRangeAll = new wxRadioButton(this, 1000, wxT("All Words"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
    m_rdRangeAlphabet = new wxRadioButton(this, 1001, wxT("Alphabet"));
    const wxString m_listRange_choices[] = {
        wxT("A"),
        wxT("B"),
        wxT("C"),
        wxT("D"),
        wxT("E"),
        wxT("F"),
        wxT("G"),
        wxT("H"),
        wxT("I"),
        wxT("J"),
        wxT("K"),
        wxT("L"),
        wxT("M"),
        wxT("N"),
        wxT("O"),
        wxT("P"),
        wxT("Q"),
        wxT("R"),
        wxT("S"),
        wxT("T"),
        wxT("U"),
        wxT("V"),
        wxT("W"),
        wxT("X"),
        wxT("Y"),
        wxT("Z")
    };
    m_listRangeLow = new wxComboBox(this, 1004, wxT(""), wxDefaultPosition, wxDefaultSize, 26, m_listRange_choices, wxCB_DROPDOWN|wxCB_DROPDOWN|wxCB_READONLY|wxCB_SORT);
    label_5 = new wxStaticText(this, wxID_ANY, wxT("~"), wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE);
    m_listRangeHigh = new wxComboBox(this, 1005, wxT(""), wxDefaultPosition, wxDefaultSize, 26, m_listRange_choices, wxCB_DROPDOWN|wxCB_DROPDOWN|wxCB_READONLY|wxCB_SORT);
    m_rdRangePrefix = new wxRadioButton(this, 1002, wxT("Prefix"));
    m_editRangePrefix = new wxTextCtrl(this, 1006, wxEmptyString);
    m_rdRangeSuffix = new wxRadioButton(this, 1003, wxT("Suffix"));
    m_editRangeSuffix = new wxTextCtrl(this, 1007, wxEmptyString);
    m_rdRangeTag = new wxRadioButton(this, 1008, wxT("Tag"));
    m_editRangeTag = new wxTextCtrl(this, 1009, wxEmptyString);
    static_line_1 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_VERTICAL);
    label_2 = new wxStaticText(this, wxID_ANY, wxT("Separator"));
    m_rdSepCRLF = new wxRadioButton(this, 1010, wxT("by CRLF"), wxDefaultPosition, wxDefaultSize, wxRB_GROUP);
    m_rdSepComma = new wxRadioButton(this, 1011, wxT("by Comma"));
    m_rdSepSemi = new wxRadioButton(this, 1012, wxT("by Semicolon"));
    m_rdSepVertical = new wxRadioButton(this, 1015, wxT("by Vertical Line"));
    m_rdSepCustom = new wxRadioButton(this, 1013, wxT("by Custom"));
    m_editSepCustom = new wxTextCtrl(this, 1014, wxEmptyString);
    static_line_2 = new wxStaticLine(this, wxID_ANY);
    label_3 = new wxStaticText(this, wxID_ANY, wxT("Options"));
    m_cbOptionSymbol = new wxCheckBox(this, 1020, wxT("with Phonetic Symbol"));
    m_cbOptionNumber = new wxCheckBox(this, 1021, wxT("Number of Words per File"));
    m_editOptionNum = new wxTextCtrl(this, 1022, wxEmptyString);
    static_line_3 = new wxStaticLine(this, wxID_ANY);
    label_4 = new wxStaticText(this, wxID_ANY, wxT("Export"));
    m_editExportFile = new wxStaticText(this, wxID_ANY, wxT("Output File"));
    m_editOutput = new wxTextCtrl(this, 1030, wxEmptyString);
    m_btnExportBrowse = new wxButton(this, 1031, wxT("Browse.."));
    panel_3 = new wxPanel(this, wxID_ANY);
    m_btnExport = new wxButton(this, 1032, wxT("Export !"));
    panel_4 = new wxPanel(this, wxID_ANY);
    static_line_4 = new wxStaticLine(this, wxID_ANY);
    panel_5 = new wxPanel(this, wxID_ANY);
    m_btnClose = new wxButton(this, wxID_CLOSE, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(WordExportDialog, wxDialog)
    // begin wxGlade: WordExportDialog::event_table
    EVT_RADIOBUTTON(1000, WordExportDialog::OnRadioRangeClick)
    EVT_RADIOBUTTON(1001, WordExportDialog::OnRadioRangeClick)
    EVT_RADIOBUTTON(1002, WordExportDialog::OnRadioRangeClick)
    EVT_RADIOBUTTON(1003, WordExportDialog::OnRadioRangeClick)
    EVT_RADIOBUTTON(1008, WordExportDialog::OnRadioRangeClick)
    EVT_RADIOBUTTON(1010, WordExportDialog::OnRadioSeparatorClick)
    EVT_RADIOBUTTON(1011, WordExportDialog::OnRadioSeparatorClick)
    EVT_RADIOBUTTON(1012, WordExportDialog::OnRadioSeparatorClick)
    EVT_RADIOBUTTON(1013, WordExportDialog::OnRadioSeparatorClick)
    EVT_CHECKBOX(1021, WordExportDialog::OnCheckOptionWord)
    EVT_TEXT(1030, WordExportDialog::OnEditOutputText)
    EVT_BUTTON(1031, WordExportDialog::OnBtnBrowse)
    EVT_BUTTON(1032, WordExportDialog::OnBtnExport)
    EVT_BUTTON(wxID_CLOSE, WordExportDialog::OnBtnClose)
    // end wxGlade
END_EVENT_TABLE();


void WordExportDialog::OnRadioRangeClick(wxCommandEvent &event)
{
    m_listRangeLow->Enable(m_rdRangeAlphabet->GetValue());       
    m_listRangeHigh->Enable(m_rdRangeAlphabet->GetValue());

    m_editRangePrefix->Enable(m_rdRangePrefix->GetValue());

    m_editRangeSuffix->Enable(m_rdRangeSuffix->GetValue());

    m_editRangeTag->Enable(m_rdRangeTag->GetValue());
}


void WordExportDialog::OnRadioSeparatorClick(wxCommandEvent &event)
{
    m_editSepCustom->Enable(m_rdSepCustom->GetValue());
}


void WordExportDialog::OnCheckOptionWord(wxCommandEvent &event)
{
    m_editOptionNum->Enable(m_cbOptionNumber->IsChecked());
}


void WordExportDialog::OnEditOutputText(wxCommandEvent &event)
{
    m_btnExport->Enable(!m_editOutput->GetValue().empty());
}


void WordExportDialog::OnBtnBrowse(wxCommandEvent &event)
{
    wxFileDialog dlg(this, wxT("Select output file"), wxEmptyString, wxT("LingosHook_WordExport.txt"), wxT("Text Files(*.txt)|*.txt|CSV Files(*.csv)|*.csv|All Files(*.*)|*.*"));
    if(dlg.ShowModal() == wxID_OK)
    {
        m_editOutput->SetValue(dlg.GetPath());
    }
}


void WordExportDialog::OnBtnExport(wxCommandEvent &event)
{
    m_btnClose->Enable(false);
    if(Export() == 0)
    {
        wxMessageBox(wxT("Export Complete."), wxT("WordExport"), wxCENTRE | wxOK | wxICON_INFORMATION);
    }
    else
    {
        wxMessageBox(wxT("Export FAIL."), wxT("WordExport"), wxCENTRE | wxOK | wxICON_ERROR);
    }
    m_btnClose->Enable(true);
}


void WordExportDialog::OnBtnClose(wxCommandEvent &event)
{
    Close();
}


// wxGlade: add WordExportDialog event handlers


void WordExportDialog::set_properties()
{
    // begin wxGlade: WordExportDialog::set_properties
    SetTitle(wxT("Word Export - LingosHook Plugins"));
    SetSize(wxSize(472, 420));
    label_1->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    m_rdRangeAll->SetValue(1);
    m_listRangeLow->Enable(false);
    m_listRangeLow->SetSelection(0);
    m_listRangeHigh->Enable(false);
    m_listRangeHigh->SetSelection(25);
    m_editRangePrefix->Enable(false);
    m_editRangeSuffix->Enable(false);
    m_editRangeTag->Enable(false);
    label_2->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    m_rdSepCRLF->SetValue(1);
    m_editSepCustom->Enable(false);
    label_3->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    m_cbOptionSymbol->Enable(false);
    m_editOptionNum->Enable(false);
    label_4->SetFont(wxFont(10, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    m_btnExport->Enable(false);

    m_editOptionNum->SetValue(wxT("100"));
    // end wxGlade
}


void WordExportDialog::do_layout()
{
    // begin wxGlade: WordExportDialog::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_21 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_8 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_20 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_22 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_18 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_17 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_16 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_19 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_15 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_14 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_13 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_12 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_11 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_10 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_9 = new wxBoxSizer(wxHORIZONTAL);
    sizer_5->Add(label_1, 0, wxALL, 4);
    sizer_9->Add(20, 20, 0, 0, 0);
    sizer_9->Add(m_rdRangeAll, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_5->Add(sizer_9, 0, wxRIGHT|wxEXPAND, 4);
    sizer_10->Add(20, 20, 0, 0, 0);
    sizer_10->Add(m_rdRangeAlphabet, 2, wxALIGN_CENTER_VERTICAL, 0);
    sizer_10->Add(m_listRangeLow, 1, wxALIGN_CENTER_VERTICAL, 0);
    sizer_10->Add(label_5, 1, wxALIGN_CENTER_VERTICAL, 0);
    sizer_10->Add(m_listRangeHigh, 1, wxALIGN_CENTER_VERTICAL, 0);
    sizer_5->Add(sizer_10, 0, wxRIGHT|wxTOP|wxEXPAND, 4);
    sizer_11->Add(20, 20, 0, 0, 0);
    sizer_11->Add(m_rdRangePrefix, 2, wxALIGN_CENTER_VERTICAL, 0);
    sizer_11->Add(m_editRangePrefix, 3, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    sizer_5->Add(sizer_11, 0, wxRIGHT|wxTOP|wxEXPAND, 4);
    sizer_12->Add(20, 20, 0, 0, 0);
    sizer_12->Add(m_rdRangeSuffix, 2, wxALIGN_CENTER_VERTICAL, 0);
    sizer_12->Add(m_editRangeSuffix, 3, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    sizer_5->Add(sizer_12, 0, wxRIGHT|wxTOP|wxEXPAND, 4);
    sizer_2->Add(20, 20, 0, 0, 0);
    sizer_2->Add(m_rdRangeTag, 2, wxALIGN_CENTER_VERTICAL, 0);
    sizer_2->Add(m_editRangeTag, 3, wxALIGN_CENTER_VERTICAL, 0);
    sizer_5->Add(sizer_2, 0, wxRIGHT|wxTOP|wxEXPAND, 4);
    sizer_4->Add(sizer_5, 1, wxEXPAND, 0);
    sizer_4->Add(static_line_1, 0, wxLEFT|wxTOP|wxEXPAND, 16);
    sizer_6->Add(label_2, 0, wxALL, 4);
    sizer_13->Add(20, 20, 0, 0, 0);
    sizer_13->Add(m_rdSepCRLF, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_6->Add(sizer_13, 0, wxRIGHT|wxEXPAND, 4);
    sizer_14->Add(20, 20, 0, 0, 0);
    sizer_14->Add(m_rdSepComma, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_6->Add(sizer_14, 0, wxRIGHT|wxTOP|wxEXPAND, 4);
    sizer_15->Add(20, 20, 0, 0, 0);
    sizer_15->Add(m_rdSepSemi, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_6->Add(sizer_15, 0, wxRIGHT|wxTOP|wxEXPAND, 4);
    sizer_19->Add(20, 20, 0, 0, 0);
    sizer_19->Add(m_rdSepVertical, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_6->Add(sizer_19, 0, wxRIGHT|wxTOP|wxEXPAND, 4);
    sizer_16->Add(20, 20, 0, 0, 0);
    sizer_16->Add(m_rdSepCustom, 2, wxALIGN_CENTER_VERTICAL, 0);
    sizer_16->Add(m_editSepCustom, 3, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0);
    sizer_6->Add(sizer_16, 0, wxRIGHT|wxTOP|wxEXPAND, 4);
    sizer_4->Add(sizer_6, 1, wxEXPAND, 0);
    sizer_3->Add(sizer_4, 0, wxLEFT|wxRIGHT|wxTOP|wxEXPAND, 4);
    sizer_3->Add(static_line_2, 0, wxALL|wxEXPAND, 8);
    sizer_7->Add(label_3, 0, wxLEFT|wxRIGHT, 4);
    sizer_17->Add(20, 20, 0, 0, 0);
    sizer_17->Add(m_cbOptionSymbol, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 4);
    sizer_7->Add(sizer_17, 0, wxTOP|wxEXPAND, 4);
    sizer_18->Add(20, 20, 0, 0, 0);
    sizer_18->Add(m_cbOptionNumber, 0, wxBOTTOM|wxALIGN_CENTER_VERTICAL, 4);
    sizer_18->Add(m_editOptionNum, 0, wxLEFT|wxALIGN_CENTER_VERTICAL, 4);
    sizer_7->Add(sizer_18, 0, wxTOP|wxEXPAND, 4);
    sizer_3->Add(sizer_7, 0, wxLEFT|wxRIGHT|wxEXPAND, 4);
    sizer_3->Add(static_line_3, 0, wxALL|wxEXPAND, 8);
    sizer_8->Add(label_4, 0, wxALL, 4);
    sizer_22->Add(20, 20, 0, 0, 0);
    sizer_22->Add(m_editExportFile, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_22->Add(m_editOutput, 1, wxLEFT|wxALIGN_CENTER_VERTICAL, 4);
    sizer_22->Add(m_btnExportBrowse, 0, wxALIGN_CENTER_VERTICAL, 0);
    sizer_8->Add(sizer_22, 1, wxEXPAND, 4);
    sizer_20->Add(panel_3, 2, wxEXPAND, 0);
    sizer_20->Add(m_btnExport, 3, 0, 0);
    sizer_20->Add(panel_4, 2, wxEXPAND, 0);
    sizer_8->Add(sizer_20, 0, wxTOP|wxEXPAND, 8);
    sizer_3->Add(sizer_8, 0, wxLEFT|wxRIGHT|wxTOP|wxEXPAND, 4);
    sizer_1->Add(sizer_3, 1, wxEXPAND, 0);
    sizer_1->Add(static_line_4, 0, wxALL|wxEXPAND, 4);
    sizer_21->Add(panel_5, 1, wxEXPAND, 0);
    sizer_21->Add(m_btnClose, 0, 0, 0);
    sizer_1->Add(sizer_21, 0, wxALL|wxEXPAND, 4);
    SetSizer(sizer_1);
    Layout();
    // end wxGlade
}


int WordExportDialog::MakeSQL(wxString &sql) const
{
    if(m_rdRangeAll->GetValue())
    {
        sql = wxT("select Word from WordTable");       
    }
    else if(m_rdRangeAlphabet->GetValue())
    {
        sql = wxString::Format(wxT("select Word from WordTable where ((Word >= '%c' and Word < '%c') or (Word >= '%c' and Word < '%c'))")
            , m_listRangeLow->GetCurrentSelection() + 'A', m_listRangeHigh->GetCurrentSelection() + 1 + 'A', m_listRangeLow->GetCurrentSelection() + 'a', m_listRangeHigh->GetCurrentSelection() + 1 + 'a');
    }
    else if(m_rdRangePrefix->GetValue())
    {
        sql = wxString::Format(wxT("select Word from WordTable where Word like '%s%%'"), m_editRangePrefix->GetValue());
    }
    else if(m_rdRangeSuffix->GetValue())
    {
        sql = wxString::Format(wxT("select Word from WordTable where Word like '%%%s'"), m_editRangePrefix->GetValue());
    }
    else if(m_rdRangeTag->GetValue())
    {
        sql = wxString::Format(wxT("select Word from WordTable, TagIndexTable, TagTable where (WordTable.WordID = TagIndexTable.WordID) and (TagTable.TagID = TagIndexTable.TagID  and TagTable.Title = '%s')"), m_editRangeTag->GetValue());
    }
    else
    {
        return -1;
    }
    return 0;
}

int WordExportDialog::MakeSeparator(wxString &sep) const
{
    if(m_rdSepCRLF->GetValue())
    {
        sep = wxT("\n");
    }
    else if(m_rdSepComma->GetValue())
    {
        sep = wxT(",");
    }
    else if(m_rdSepSemi->GetValue())
    {
        sep = wxT(";");
    }
    else if(m_rdSepVertical->GetValue())
    {
        sep = wxT("|");
    }
    else if(m_rdSepCustom->GetValue())
    {
        sep = m_editSepCustom->GetValue();
    }
    else
    {
        return -1;
    }

    return 0;
}

int WordExportDialog::Export()
{
    wxString sql, separator;
    if(MakeSQL(sql) != 0)
        return -1;
    if(MakeSeparator(separator) != 0)
        return -1;

    long num = 0;
    if(m_editOptionNum->IsEnabled() && !m_editOptionNum->GetValue().ToLong(&num))
        return -1;
    
    wxString file = m_editOutput->GetValue();
    wxString suffix = wxT("txt");
    wxString::size_type pos = file.find_last_of(wxT("."));
    if(pos != wxString::npos)
    {
        suffix = file.substr(pos + 1, file.size() - pos);
        file = file.substr(0, pos);
    }

    if(ExportFile(file, suffix, sql, separator, num) != 0)
    {
        return -1;
    }

    return 0;
}

int WordExportDialog::ExportFile(const wxString& file, const wxString& suffix, const wxString &sql, const wxString &sep, long num)
{
    if(_objDBAccess == NULL)
        return -1;

    int filecount = 0;

    CDBAccess::TDatabase& db = _objDBAccess->Database();

    CDBAccess::TQuery query = db.PrepareStatement(sql);
    CDBAccess::TResult res = query.ExecuteQuery();
    if(!res.IsOk())
        return -1;

    std::auto_ptr<wxFileOutputStream> ofs(NULL);
    std::auto_ptr<wxTextOutputStream> tos(NULL);
    int wordcount = 0;

    while(res.NextRow())
    {
        if((wordcount == 0) || ((num != 0) && (wordcount % num == 0)))
        {
            wxString fname;
            if(num != 0)
            {
                fname = wxString::Format(wxT("%s_%d.%s"), file, filecount, suffix);
            }
            else
            {
                fname = wxString::Format(wxT("%s.%s"), file, suffix);
            }
            if(ofs.get() != NULL)
                ofs->Close();

            ofs.reset(new wxFileOutputStream(fname));
            if(!ofs->IsOk())
                return -1;
            tos.reset(new wxTextOutputStream((*ofs)));

            ++ filecount;
        }

        (*tos) << res.GetString(0) << sep;

        ++ wordcount;
    }

    if(ofs.get() != NULL)
        ofs->Close();

    return 0;
}
