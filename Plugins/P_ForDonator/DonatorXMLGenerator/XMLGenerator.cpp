// -*- C++ -*- generated by wxGlade 0.6.3 on Tue Mar 01 14:10:32 2011

#include "wx/wfstream.h"
#include "wx/txtstrm.h"

#include "../md5.h"

#include "XMLGenerator.h"

// begin wxGlade: ::extracode
// end wxGlade


const wxString MyFrame::XMLFILE_NAME    =   wxT("\\ForDonator");

class MyApp: public wxApp {
public:
    bool OnInit();
};

IMPLEMENT_APP(MyApp)

bool MyApp::OnInit()
{
    wxInitAllImageHandlers();
    MyFrame* frame_1 = new MyFrame(NULL, wxID_ANY, wxEmptyString);
    SetTopWindow(frame_1);
    frame_1->Show();
    return true;
}


MyFrame::MyFrame(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
    wxFrame(parent, id, title, pos, size, wxCAPTION|wxCLOSE_BOX|wxMINIMIZE_BOX|wxSYSTEM_MENU|wxRESIZE_BORDER|wxTAB_TRAVERSAL|wxCLIP_CHILDREN)
{
    // begin wxGlade: MyFrame::MyFrame
    label_1 = new wxStaticText(this, wxID_ANY, wxT("Donator:"));
    m_textDonator = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_2 = new wxStaticText(this, wxID_ANY, wxT("Date:"));
    m_textDate = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_3 = new wxStaticText(this, wxID_ANY, wxT("Output:"));
    m_textOutput = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    static_line_1 = new wxStaticLine(this, wxID_ANY);
    label_4 = new wxStaticText(this, wxID_ANY, wxT("Plugin:"));
    m_textPlugin = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_5 = new wxStaticText(this, wxID_ANY, wxT("7zip:"));
    m_text7zip = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    label_6 = new wxStaticText(this, wxID_ANY, wxT("OpenSSL:"));
    m_textOpenssl = new wxTextCtrl(this, wxID_ANY, wxEmptyString);
    static_line_2 = new wxStaticLine(this, wxID_ANY);
    m_btnGenerate = new wxButton(this, 1000, wxT("&Generate!"));
    panel_1 = new wxPanel(this, wxID_ANY);
    button_2 = new wxButton(this, wxID_CLOSE, wxEmptyString);

    set_properties();
    do_layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(MyFrame, wxFrame)
    // begin wxGlade: MyFrame::event_table
    EVT_BUTTON(1000, MyFrame::OnBtnGenerate)
    EVT_BUTTON(wxID_CLOSE, MyFrame::OnBtnClose)
    // end wxGlade
END_EVENT_TABLE();


void MyFrame::OnBtnGenerate(wxCommandEvent &event)
{
    wxString donator = m_textDonator->GetValue();
    wxString date = m_textDate->GetValue();
    wxString output = m_textOutput->GetValue();

    wxString plugin = m_textPlugin->GetValue();
    wxString zip = m_text7zip->GetValue();
    wxString openssl = m_textOpenssl->GetValue();

    if(Generate(donator, date, output) != 0)
    {
        wxMessageBox(wxT("FAIL - XML Generate!"), wxMessageBoxCaptionStr, wxOK | wxICON_ERROR | wxCENTRE);
        return;
    }

    if(Zip(output, plugin, zip) != 0)
    {
        wxMessageBox(wxT("FAIL - ZIP!"), wxMessageBoxCaptionStr, wxOK | wxICON_ERROR | wxCENTRE);
        return;
    }
    if(Check(output, openssl) != 0)
    {
        wxMessageBox(wxT("FAIL - OPENSSL!"), wxMessageBoxCaptionStr, wxOK | wxICON_ERROR | wxCENTRE);
        return;
    }

    wxMessageBox(wxT("DONE!"));
}


void MyFrame::OnBtnClose(wxCommandEvent &event)
{
    Close();
}


// wxGlade: add MyFrame event handlers


void MyFrame::set_properties()
{
    // begin wxGlade: MyFrame::set_properties
    SetTitle(wxT("ForDonator XML Generator"));

    wxDateTime date(time(NULL));

    m_textDate->SetValue(date.Format(wxT("%Y/%m/%d")));

    m_textOutput->SetValue(wxT("."));
    m_textPlugin->SetValue(wxT("D:\\Studio\\SVN_ROOT\\LingosHook\\Output\\plugins\\P_ForDonator.dll"));
    m_text7zip->SetValue(wxT("C:\\Program Files (x86)\\7-Zip\\7z.exe"));
    m_textOpenssl->SetValue(wxT("D:\\Studio\\Libraries\\openssl-1.0.0d\\bin\\openssl.exe"));

    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
    // end wxGlade
}


void MyFrame::do_layout()
{
    // begin wxGlade: MyFrame::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_10 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_9 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_8 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    sizer_4->Add(label_1, 1, wxALIGN_CENTER_VERTICAL, 0);
    sizer_4->Add(m_textDonator, 5, wxLEFT|wxEXPAND, 4);
    sizer_3->Add(sizer_4, 1, wxALL|wxEXPAND, 4);
    sizer_5->Add(label_2, 1, wxALIGN_CENTER_VERTICAL, 0);
    sizer_5->Add(m_textDate, 5, wxLEFT|wxEXPAND, 4);
    sizer_3->Add(sizer_5, 1, wxALL|wxEXPAND, 4);
    sizer_6->Add(label_3, 1, wxALIGN_CENTER_VERTICAL, 0);
    sizer_6->Add(m_textOutput, 5, wxLEFT|wxEXPAND, 4);
    sizer_3->Add(sizer_6, 1, wxALL|wxEXPAND, 4);
    sizer_1->Add(sizer_3, 0, wxEXPAND, 0);
    sizer_1->Add(static_line_1, 0, wxALL|wxEXPAND, 8);
    sizer_8->Add(label_4, 1, wxALIGN_CENTER_VERTICAL, 0);
    sizer_8->Add(m_textPlugin, 5, wxLEFT|wxEXPAND, 4);
    sizer_7->Add(sizer_8, 1, wxALL|wxEXPAND, 4);
    sizer_9->Add(label_5, 1, wxALIGN_CENTER_VERTICAL, 0);
    sizer_9->Add(m_text7zip, 5, wxLEFT|wxEXPAND, 4);
    sizer_7->Add(sizer_9, 1, wxALL|wxEXPAND, 4);
    sizer_10->Add(label_6, 1, wxALIGN_CENTER_VERTICAL, 0);
    sizer_10->Add(m_textOpenssl, 5, wxLEFT|wxEXPAND, 4);
    sizer_7->Add(sizer_10, 1, wxALL|wxEXPAND, 4);
    sizer_1->Add(sizer_7, 0, wxEXPAND, 0);
    sizer_1->Add(static_line_2, 0, wxALL|wxEXPAND, 8);
    sizer_2->Add(m_btnGenerate, 0, 0, 0);
    sizer_2->Add(panel_1, 1, wxEXPAND, 0);
    sizer_2->Add(button_2, 0, 0, 0);
    sizer_1->Add(sizer_2, 0, wxALL|wxEXPAND, 4);
    SetSizer(sizer_1);
    sizer_1->Fit(this);
    Layout();
    Centre();
    // end wxGlade
}

int MyFrame::Generate(const wxString& donator, const wxString& date, const wxString& output) const
{
//<!-- Please do NOT modify the below content -->
//<?xml version="1.0" encoding="utf-8"?>
//<ForDonator>
//<VersionInfo>
//	<LingosHook>1</LingosHook>
//	<Plugin>1</Plugin>
//</VersionInfo>
//<DonatorInfo>
//	<Name>Test</Name>
//	<Date>2011/02/25</Date>
//</DonatorInfo>
//<Checksum></Checksum>
//</ForDonator>

    if(donator.size() + date.size() > 128)
        return -1;

    wxByte buff[128];
    memset(buff, 'x', sizeof(buff));

    size_t i = wxConvUTF7.WC2MB((char*)buff, date.c_str(), 128);
    i += wxConvUTF7.WC2MB((char*)(buff + i), donator.c_str(), 128 - i);    
    i += wxConvUTF7.WC2MB((char*)(buff + i), wxString(wxT("LingosHook")).c_str(), 128 - i);

    MD5 md5;
    md5.update(buff, i);

    wxString ret = md5.getValue(true);

    wxFileOutputStream ofs(output+ XMLFILE_NAME + wxT(".xml"));

    if(!ofs.IsOk())
        return -1;

    wxTextOutputStream tos(ofs);

    tos << wxT("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
    tos << wxT("<!-- Please do NOT modify the below content. -->\n");
    tos << wxT("<ForDonator>\n");
    tos << wxT("\t<VersionInfo>\n");
    tos << wxT("\t\t<LingosHook>1</LingosHook>\n");
    tos << wxT("\t\t<Plugin>1</Plugin>\n");
    tos << wxT("\t</VersionInfo>\n");
    tos << wxT("\t<DonatorInfo>\n");
    tos << wxT("\t\t<Name>") << donator << wxT("</Name>\n");
    tos << wxT("\t\t<Date>") << date << wxT("</Date>\n");
    tos << wxT("\t</DonatorInfo>\n");
    tos << wxT("\t<Checksum>") << ret << wxT("</Checksum>\n");
    tos << wxT("</ForDonator>\n");

    ofs.Close();

    return 0;
}

int MyFrame::Zip(const wxString &output, const wxString &plugin, const wxString &zip) const
{
    wxString cmd = wxT("\"") + zip + wxT("\" a ") + output + XMLFILE_NAME + wxT(".zip ") + plugin + wxT(" ") + output + XMLFILE_NAME + wxT(".xml");
    return ::wxExecute(cmd, wxEXEC_SYNC);
}

int MyFrame::Check(const wxString &output, const wxString &openssl) const
{
    wxString cmd = wxT("\"") + openssl +wxT("\"") + wxT(" dgst -out ") + output + XMLFILE_NAME + wxT(".md5 -signature -md5 ") + output + XMLFILE_NAME + wxT(".zip");
    return ::wxExecute(cmd, wxEXEC_SYNC);
}
